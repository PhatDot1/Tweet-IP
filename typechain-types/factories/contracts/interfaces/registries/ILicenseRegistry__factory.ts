/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ILicenseRegistry,
  ILicenseRegistryInterface,
} from "../../../../contracts/interfaces/registries/ILicenseRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "DefaultLicenseTermsSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expireTime",
        type: "uint256",
      },
    ],
    name: "ExpirationTimeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
    ],
    name: "LicenseTemplateRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "isSet",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "mintingFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "licensingHook",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "hookData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "expectMinimumGroupRewardShare",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "expectGroupRewardPool",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct Licensing.LicensingConfig",
        name: "licensingConfig",
        type: "tuple",
      },
    ],
    name: "LicensingConfigSetForLicense",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "attachLicenseTermsToIp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "getAncestorsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getAttachedLicenseTerms",
    outputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "getAttachedLicenseTermsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDefaultLicenseTerms",
    outputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "parentIpId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getDerivativeIp",
    outputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "parentIpId",
        type: "address",
      },
    ],
    name: "getDerivativeIpCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "getExpireTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "getLicensingConfig",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isSet",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "mintingFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "licensingHook",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "hookData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "expectMinimumGroupRewardShare",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "expectGroupRewardPool",
            type: "address",
          },
        ],
        internalType: "struct Licensing.LicensingConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getParentIp",
    outputs: [
      {
        internalType: "address",
        name: "parentIpId",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
    ],
    name: "getParentIpCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
      {
        internalType: "address",
        name: "parentIpId",
        type: "address",
      },
    ],
    name: "getParentLicenseTerms",
    outputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "getRoyaltyPercent",
    outputs: [
      {
        internalType: "uint32",
        name: "royaltyPercent",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "hasDerivativeIps",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "hasIpAttachedLicenseTerms",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
    ],
    name: "initializeLicenseTemplate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "isDefaultLicense",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "isDerivativeIp",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "isExpiredNow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "parentIpId",
        type: "address",
      },
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
    ],
    name: "isParentIp",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
    ],
    name: "isRegisteredLicenseTemplate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "parentIpIds",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "licenseTermsIds",
        type: "uint256[]",
      },
      {
        internalType: "bool",
        name: "isUsingLicenseToken",
        type: "bool",
      },
    ],
    name: "registerDerivativeIp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
    ],
    name: "registerLicenseTemplate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newLicenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "newLicenseTermsId",
        type: "uint256",
      },
    ],
    name: "setDefaultLicenseTerms",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "isSet",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "mintingFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "licensingHook",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "hookData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "expectMinimumGroupRewardShare",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "expectGroupRewardPool",
            type: "address",
          },
        ],
        internalType: "struct Licensing.LicensingConfig",
        name: "licensingConfig",
        type: "tuple",
      },
    ],
    name: "setLicensingConfigForLicense",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        internalType: "address",
        name: "groupRewardPool",
        type: "address",
      },
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "groupLicenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "groupLicenseTermsId",
        type: "uint256",
      },
    ],
    name: "verifyGroupAddIp",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isSet",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "mintingFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "licensingHook",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "hookData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "expectMinimumGroupRewardShare",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "expectGroupRewardPool",
            type: "address",
          },
        ],
        internalType: "struct Licensing.LicensingConfig",
        name: "ipLicensingConfig",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licensorIpId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isMintedByIpOwner",
        type: "bool",
      },
    ],
    name: "verifyMintLicenseToken",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isSet",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "mintingFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "licensingHook",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "hookData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "expectMinimumGroupRewardShare",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "expectGroupRewardPool",
            type: "address",
          },
        ],
        internalType: "struct Licensing.LicensingConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ILicenseRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): ILicenseRegistryInterface {
    return new Interface(_abi) as ILicenseRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ILicenseRegistry {
    return new Contract(address, _abi, runner) as unknown as ILicenseRegistry;
  }
}
