/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGroupingModule,
  IGroupingModuleInterface,
} from "../../../../../contracts/interfaces/modules/grouping/IGroupingModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "ipIds",
        type: "address[]",
      },
    ],
    name: "AddedIpToGroup",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "ipId",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amount",
        type: "uint256[]",
      },
    ],
    name: "ClaimedReward",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "CollectedRoyaltiesToGroupPool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "groupPool",
        type: "address",
      },
    ],
    name: "IPGroupRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "ipIds",
        type: "address[]",
      },
    ],
    name: "RemovedIpFromGroup",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "groupIpId",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "ipIds",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "maxAllowedRewardShare",
        type: "uint256",
      },
    ],
    name: "addIp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "ipIds",
        type: "address[]",
      },
    ],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "collectRoyalties",
    outputs: [
      {
        internalType: "uint256",
        name: "royalties",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "groupId",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "ipIds",
        type: "address[]",
      },
    ],
    name: "getClaimableReward",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "groupPool",
        type: "address",
      },
    ],
    name: "registerGroup",
    outputs: [
      {
        internalType: "address",
        name: "groupId",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "groupIpId",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "ipIds",
        type: "address[]",
      },
    ],
    name: "removeIp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rewardPool",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "whitelistGroupRewardPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IGroupingModule__factory {
  static readonly abi = _abi;
  static createInterface(): IGroupingModuleInterface {
    return new Interface(_abi) as IGroupingModuleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IGroupingModule {
    return new Contract(address, _abi, runner) as unknown as IGroupingModule;
  }
}
