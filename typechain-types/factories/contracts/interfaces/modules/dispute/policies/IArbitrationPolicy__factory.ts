/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IArbitrationPolicy,
  IArbitrationPolicyInterface,
} from "../../../../../../contracts/interfaces/modules/dispute/policies/IArbitrationPolicy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onDisputeCancel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "decision",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onDisputeJudgement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "disputeInitiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "targetIpId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "disputeEvidenceHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "targetTag",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onRaiseDispute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onResolveDispute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IArbitrationPolicy__factory {
  static readonly abi = _abi;
  static createInterface(): IArbitrationPolicyInterface {
    return new Interface(_abi) as IArbitrationPolicyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IArbitrationPolicy {
    return new Contract(address, _abi, runner) as unknown as IArbitrationPolicy;
  }
}
