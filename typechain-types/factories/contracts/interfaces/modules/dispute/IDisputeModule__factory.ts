/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDisputeModule,
  IDisputeModuleInterface,
} from "../../../../../contracts/interfaces/modules/dispute/IDisputeModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "cooldown",
        type: "uint256",
      },
    ],
    name: "ArbitrationPolicyCooldownUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nextArbitrationUpdateTimestamp",
        type: "uint256",
      },
    ],
    name: "ArbitrationPolicySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "ArbitrationPolicyWhitelistUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "arbitrationRelayer",
        type: "address",
      },
    ],
    name: "ArbitrationRelayerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
    ],
    name: "DefaultArbitrationPolicyUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "DisputeCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "decision",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "DisputeJudgementSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "targetIpId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "disputeInitiator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "disputeTimestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "disputeEvidenceHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "targetTag",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "DisputeRaised",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "DisputeResolved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "infringingIpId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "ipIdToTag",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "infringerDisputeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "tag",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "disputeTimestamp",
        type: "uint256",
      },
    ],
    name: "IpTaggedOnRelatedIpInfringement",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "tag",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "TagWhitelistUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "arbitrationPolicies",
    outputs: [
      {
        internalType: "address",
        name: "policy",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
    ],
    name: "arbitrationRelayer",
    outputs: [
      {
        internalType: "address",
        name: "arbitrationRelayer",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseArbitrationPolicy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "cancelDispute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disputeCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
    ],
    name: "disputes",
    outputs: [
      {
        internalType: "address",
        name: "targetIpId",
        type: "address",
      },
      {
        internalType: "address",
        name: "disputeInitiator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "disputeTimestamp",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "disputeEvidenceHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "targetTag",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "currentTag",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "infringerDisputeId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "isIpTagged",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
    ],
    name: "isWhitelistedArbitrationPolicy",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "tag",
        type: "bytes32",
      },
    ],
    name: "isWhitelistedDisputeTag",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "targetIpId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "disputeEvidenceHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "targetTag",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "raiseDispute",
    outputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "resolveDispute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
    ],
    name: "setArbitrationPolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cooldown",
        type: "uint256",
      },
    ],
    name: "setArbitrationPolicyCooldown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
      {
        internalType: "address",
        name: "arbPolicyRelayer",
        type: "address",
      },
    ],
    name: "setArbitrationRelayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
    ],
    name: "setBaseArbitrationPolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "decision",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "setDisputeJudgement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipIdToTag",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "infringerDisputeId",
        type: "uint256",
      },
    ],
    name: "tagIfRelatedIpInfringed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "updateActiveArbitrationPolicy",
    outputs: [
      {
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "arbitrationPolicy",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "whitelistArbitrationPolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "tag",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "whitelistDisputeTag",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDisputeModule__factory {
  static readonly abi = _abi;
  static createInterface(): IDisputeModuleInterface {
    return new Interface(_abi) as IDisputeModuleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDisputeModule {
    return new Contract(address, _abi, runner) as unknown as IDisputeModule;
  }
}
