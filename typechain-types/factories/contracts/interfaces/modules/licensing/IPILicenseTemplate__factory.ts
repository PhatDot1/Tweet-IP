/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPILicenseTemplate,
  IPILicenseTemplateInterface,
} from "../../../../../contracts/interfaces/modules/licensing/IPILicenseTemplate";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "licenseTerms",
        type: "bytes",
      },
    ],
    name: "LicenseTermsRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "allowDerivativeRegistration",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "canAttachToGroupIp",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "newRoyaltyPercent",
        type: "uint32",
      },
    ],
    name: "canOverrideRoyaltyPercent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "licenseTermsIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
    ],
    name: "getEarlierExpireTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
    ],
    name: "getExpireTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "selectedLicenseTermsId",
        type: "uint256",
      },
    ],
    name: "getLicenseTerms",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "transferable",
            type: "bool",
          },
          {
            internalType: "address",
            name: "royaltyPolicy",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "defaultMintingFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiration",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "commercialUse",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "commercialAttribution",
            type: "bool",
          },
          {
            internalType: "address",
            name: "commercializerChecker",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "commercializerCheckerData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "commercialRevCeiling",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "derivativesAllowed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesAttribution",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesApproval",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesReciprocal",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "derivativeRevCeiling",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
        ],
        internalType: "struct PILTerms",
        name: "terms",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "transferable",
            type: "bool",
          },
          {
            internalType: "address",
            name: "royaltyPolicy",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "defaultMintingFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiration",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "commercialUse",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "commercialAttribution",
            type: "bool",
          },
          {
            internalType: "address",
            name: "commercializerChecker",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "commercializerCheckerData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "commercialRevCeiling",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "derivativesAllowed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesAttribution",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesApproval",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesReciprocal",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "derivativeRevCeiling",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
        ],
        internalType: "struct PILTerms",
        name: "terms",
        type: "tuple",
      },
    ],
    name: "getLicenseTermsId",
    outputs: [
      {
        internalType: "uint256",
        name: "selectedLicenseTermsId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "getLicenseTermsURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMetadataURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "getRoyaltyPolicy",
    outputs: [
      {
        internalType: "address",
        name: "royaltyPolicy",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "royaltyPercent",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "mintingLicenseFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "currencyToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "isLicenseTransferable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "transferable",
            type: "bool",
          },
          {
            internalType: "address",
            name: "royaltyPolicy",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "defaultMintingFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiration",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "commercialUse",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "commercialAttribution",
            type: "bool",
          },
          {
            internalType: "address",
            name: "commercializerChecker",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "commercializerCheckerData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "commercialRevCeiling",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "derivativesAllowed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesAttribution",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesApproval",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "derivativesReciprocal",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "derivativeRevCeiling",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
        ],
        internalType: "struct PILTerms",
        name: "terms",
        type: "tuple",
      },
    ],
    name: "registerLicenseTerms",
    outputs: [
      {
        internalType: "uint256",
        name: "selectedLicenseTermsId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "toJson",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalRegisteredLicenseTerms",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "licenseTermsIds",
        type: "uint256[]",
      },
    ],
    name: "verifyCompatibleLicenses",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "licensee",
        type: "address",
      },
      {
        internalType: "address",
        name: "licensorIpId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "verifyMintLicenseToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
      {
        internalType: "address",
        name: "parentIpId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "licensee",
        type: "address",
      },
    ],
    name: "verifyRegisterDerivative",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "parentIpId",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "licenseTermsIds",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "verifyRegisterDerivativeForAllParents",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPILicenseTemplate__factory {
  static readonly abi = _abi;
  static createInterface(): IPILicenseTemplateInterface {
    return new Interface(_abi) as IPILicenseTemplateInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPILicenseTemplate {
    return new Contract(address, _abi, runner) as unknown as IPILicenseTemplate;
  }
}
