/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ILicensingModule,
  ILicensingModuleInterface,
} from "../../../../../contracts/interfaces/modules/licensing/ILicensingModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "licenseTokenIds",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "parentIpIds",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "licenseTermsIds",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
    ],
    name: "DerivativeRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "LicenseTermsAttached",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "licensorIpId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startLicenseTokenId",
        type: "uint256",
      },
    ],
    name: "LicenseTokensMinted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
    ],
    name: "attachDefaultLicenseTerms",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
    ],
    name: "attachLicenseTerms",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licensorIpId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "royaltyContext",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "maxMintingFee",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "maxRevenueShare",
        type: "uint32",
      },
    ],
    name: "mintLicenseTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "startLicenseTokenId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "licensorIpId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "royaltyContext",
        type: "bytes",
      },
    ],
    name: "predictMintingLicenseFee",
    outputs: [
      {
        internalType: "address",
        name: "currencyToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "parentIpIds",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "licenseTermsIds",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "royaltyContext",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "maxMintingFee",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "maxRts",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "maxRevenueShare",
        type: "uint32",
      },
    ],
    name: "registerDerivative",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "childIpId",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "licenseTokenIds",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "royaltyContext",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "maxRts",
        type: "uint32",
      },
    ],
    name: "registerDerivativeWithLicenseTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ipId",
        type: "address",
      },
      {
        internalType: "address",
        name: "licenseTemplate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "licenseTermsId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "isSet",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "mintingFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "licensingHook",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "hookData",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "commercialRevShare",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "expectMinimumGroupRewardShare",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "expectGroupRewardPool",
            type: "address",
          },
        ],
        internalType: "struct Licensing.LicensingConfig",
        name: "licensingConfig",
        type: "tuple",
      },
    ],
    name: "setLicensingConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ILicensingModule__factory {
  static readonly abi = _abi;
  static createInterface(): ILicensingModuleInterface {
    return new Interface(_abi) as ILicensingModuleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ILicensingModule {
    return new Contract(address, _abi, runner) as unknown as ILicensingModule;
  }
}
