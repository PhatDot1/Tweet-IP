/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2981__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IAccessController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessController__factory>;
    getContractFactory(
      name: "IIPGraphACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPGraphACL__factory>;
    getContractFactory(
      name: "IGroupNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGroupNFT__factory>;
    getContractFactory(
      name: "IIPAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPAccount__factory>;
    getContractFactory(
      name: "IIPAccountStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPAccountStorage__factory>;
    getContractFactory(
      name: "ILicenseToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicenseToken__factory>;
    getContractFactory(
      name: "IHookModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHookModule__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IViewModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IViewModule__factory>;
    getContractFactory(
      name: "IDisputeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDisputeModule__factory>;
    getContractFactory(
      name: "IArbitrationPolicy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrationPolicy__factory>;
    getContractFactory(
      name: "IArbitrationPolicyUMA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrationPolicyUMA__factory>;
    getContractFactory(
      name: "IOOV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOOV3__factory>;
    getContractFactory(
      name: "IOOV3Callbacks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOOV3Callbacks__factory>;
    getContractFactory(
      name: "IGroupingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGroupingModule__factory>;
    getContractFactory(
      name: "IGroupRewardPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGroupRewardPool__factory>;
    getContractFactory(
      name: "ILicenseTemplate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicenseTemplate__factory>;
    getContractFactory(
      name: "ILicensingHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicensingHook__factory>;
    getContractFactory(
      name: "ILicensingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicensingModule__factory>;
    getContractFactory(
      name: "IPILicenseTemplate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPILicenseTemplate__factory>;
    getContractFactory(
      name: "ICoreMetadataModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoreMetadataModule__factory>;
    getContractFactory(
      name: "ICoreMetadataViewModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoreMetadataViewModule__factory>;
    getContractFactory(
      name: "IRoyaltyModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoyaltyModule__factory>;
    getContractFactory(
      name: "IExternalRoyaltyPolicy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExternalRoyaltyPolicy__factory>;
    getContractFactory(
      name: "IExternalRoyaltyPolicyBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExternalRoyaltyPolicyBase__factory>;
    getContractFactory(
      name: "IGraphAwareRoyaltyPolicy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGraphAwareRoyaltyPolicy__factory>;
    getContractFactory(
      name: "IIpRoyaltyVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIpRoyaltyVault__factory>;
    getContractFactory(
      name: "IRoyaltyPolicy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoyaltyPolicy__factory>;
    getContractFactory(
      name: "IVaultController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultController__factory>;
    getContractFactory(
      name: "IProtocolPauseAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolPauseAdmin__factory>;
    getContractFactory(
      name: "IGroupIPAssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGroupIPAssetRegistry__factory>;
    getContractFactory(
      name: "IIPAccountRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPAccountRegistry__factory>;
    getContractFactory(
      name: "IIPAssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPAssetRegistry__factory>;
    getContractFactory(
      name: "ILicenseRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILicenseRegistry__factory>;
    getContractFactory(
      name: "IModuleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleRegistry__factory>;
    getContractFactory(
      name: "AccessPermission",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessPermission__factory>;
    getContractFactory(
      name: "PILFlavors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PILFlavors__factory>;
    getContractFactory(
      name: "IP_Deposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IP_Deposit__factory>;
    getContractFactory(
      name: "StoryNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StoryNFT__factory>;
    getContractFactory(
      name: "TweetIPFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TweetIPFactory__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC2981",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC2981",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2981>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IAccessController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessController>;
    getContractAt(
      name: "IIPGraphACL",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPGraphACL>;
    getContractAt(
      name: "IGroupNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGroupNFT>;
    getContractAt(
      name: "IIPAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPAccount>;
    getContractAt(
      name: "IIPAccountStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPAccountStorage>;
    getContractAt(
      name: "ILicenseToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicenseToken>;
    getContractAt(
      name: "IHookModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHookModule>;
    getContractAt(
      name: "IModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IViewModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IViewModule>;
    getContractAt(
      name: "IDisputeModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDisputeModule>;
    getContractAt(
      name: "IArbitrationPolicy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbitrationPolicy>;
    getContractAt(
      name: "IArbitrationPolicyUMA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbitrationPolicyUMA>;
    getContractAt(
      name: "IOOV3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOOV3>;
    getContractAt(
      name: "IOOV3Callbacks",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOOV3Callbacks>;
    getContractAt(
      name: "IGroupingModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGroupingModule>;
    getContractAt(
      name: "IGroupRewardPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGroupRewardPool>;
    getContractAt(
      name: "ILicenseTemplate",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicenseTemplate>;
    getContractAt(
      name: "ILicensingHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicensingHook>;
    getContractAt(
      name: "ILicensingModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicensingModule>;
    getContractAt(
      name: "IPILicenseTemplate",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPILicenseTemplate>;
    getContractAt(
      name: "ICoreMetadataModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoreMetadataModule>;
    getContractAt(
      name: "ICoreMetadataViewModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoreMetadataViewModule>;
    getContractAt(
      name: "IRoyaltyModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoyaltyModule>;
    getContractAt(
      name: "IExternalRoyaltyPolicy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExternalRoyaltyPolicy>;
    getContractAt(
      name: "IExternalRoyaltyPolicyBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExternalRoyaltyPolicyBase>;
    getContractAt(
      name: "IGraphAwareRoyaltyPolicy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGraphAwareRoyaltyPolicy>;
    getContractAt(
      name: "IIpRoyaltyVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIpRoyaltyVault>;
    getContractAt(
      name: "IRoyaltyPolicy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoyaltyPolicy>;
    getContractAt(
      name: "IVaultController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultController>;
    getContractAt(
      name: "IProtocolPauseAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolPauseAdmin>;
    getContractAt(
      name: "IGroupIPAssetRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGroupIPAssetRegistry>;
    getContractAt(
      name: "IIPAccountRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPAccountRegistry>;
    getContractAt(
      name: "IIPAssetRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPAssetRegistry>;
    getContractAt(
      name: "ILicenseRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILicenseRegistry>;
    getContractAt(
      name: "IModuleRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleRegistry>;
    getContractAt(
      name: "AccessPermission",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessPermission>;
    getContractAt(
      name: "PILFlavors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PILFlavors>;
    getContractAt(
      name: "IP_Deposit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IP_Deposit>;
    getContractAt(
      name: "StoryNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StoryNFT>;
    getContractAt(
      name: "TweetIPFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TweetIPFactory>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC2981",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC2981>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC2981",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC2981>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Enumerable>;
    deployContract(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721URIStorage>;
    deployContract(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Holder>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IAccessController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessController>;
    deployContract(
      name: "IIPGraphACL",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPGraphACL>;
    deployContract(
      name: "IGroupNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGroupNFT>;
    deployContract(
      name: "IIPAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPAccount>;
    deployContract(
      name: "IIPAccountStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPAccountStorage>;
    deployContract(
      name: "ILicenseToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicenseToken>;
    deployContract(
      name: "IHookModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHookModule>;
    deployContract(
      name: "IModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IModule>;
    deployContract(
      name: "IViewModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IViewModule>;
    deployContract(
      name: "IDisputeModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDisputeModule>;
    deployContract(
      name: "IArbitrationPolicy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IArbitrationPolicy>;
    deployContract(
      name: "IArbitrationPolicyUMA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IArbitrationPolicyUMA>;
    deployContract(
      name: "IOOV3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOOV3>;
    deployContract(
      name: "IOOV3Callbacks",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOOV3Callbacks>;
    deployContract(
      name: "IGroupingModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGroupingModule>;
    deployContract(
      name: "IGroupRewardPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGroupRewardPool>;
    deployContract(
      name: "ILicenseTemplate",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicenseTemplate>;
    deployContract(
      name: "ILicensingHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicensingHook>;
    deployContract(
      name: "ILicensingModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicensingModule>;
    deployContract(
      name: "IPILicenseTemplate",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPILicenseTemplate>;
    deployContract(
      name: "ICoreMetadataModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICoreMetadataModule>;
    deployContract(
      name: "ICoreMetadataViewModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICoreMetadataViewModule>;
    deployContract(
      name: "IRoyaltyModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRoyaltyModule>;
    deployContract(
      name: "IExternalRoyaltyPolicy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExternalRoyaltyPolicy>;
    deployContract(
      name: "IExternalRoyaltyPolicyBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExternalRoyaltyPolicyBase>;
    deployContract(
      name: "IGraphAwareRoyaltyPolicy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGraphAwareRoyaltyPolicy>;
    deployContract(
      name: "IIpRoyaltyVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIpRoyaltyVault>;
    deployContract(
      name: "IRoyaltyPolicy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRoyaltyPolicy>;
    deployContract(
      name: "IVaultController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVaultController>;
    deployContract(
      name: "IProtocolPauseAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolPauseAdmin>;
    deployContract(
      name: "IGroupIPAssetRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGroupIPAssetRegistry>;
    deployContract(
      name: "IIPAccountRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPAccountRegistry>;
    deployContract(
      name: "IIPAssetRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPAssetRegistry>;
    deployContract(
      name: "ILicenseRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicenseRegistry>;
    deployContract(
      name: "IModuleRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IModuleRegistry>;
    deployContract(
      name: "AccessPermission",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessPermission>;
    deployContract(
      name: "PILFlavors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PILFlavors>;
    deployContract(
      name: "IP_Deposit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IP_Deposit>;
    deployContract(
      name: "StoryNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StoryNFT>;
    deployContract(
      name: "TweetIPFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TweetIPFactory>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC2981",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC2981>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC2981",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC2981>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Enumerable>;
    deployContract(
      name: "ERC721URIStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721URIStorage>;
    deployContract(
      name: "IERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC721Holder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Holder>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IAccessController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessController>;
    deployContract(
      name: "IIPGraphACL",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPGraphACL>;
    deployContract(
      name: "IGroupNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGroupNFT>;
    deployContract(
      name: "IIPAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPAccount>;
    deployContract(
      name: "IIPAccountStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPAccountStorage>;
    deployContract(
      name: "ILicenseToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicenseToken>;
    deployContract(
      name: "IHookModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHookModule>;
    deployContract(
      name: "IModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IModule>;
    deployContract(
      name: "IViewModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IViewModule>;
    deployContract(
      name: "IDisputeModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDisputeModule>;
    deployContract(
      name: "IArbitrationPolicy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IArbitrationPolicy>;
    deployContract(
      name: "IArbitrationPolicyUMA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IArbitrationPolicyUMA>;
    deployContract(
      name: "IOOV3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOOV3>;
    deployContract(
      name: "IOOV3Callbacks",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOOV3Callbacks>;
    deployContract(
      name: "IGroupingModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGroupingModule>;
    deployContract(
      name: "IGroupRewardPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGroupRewardPool>;
    deployContract(
      name: "ILicenseTemplate",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicenseTemplate>;
    deployContract(
      name: "ILicensingHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicensingHook>;
    deployContract(
      name: "ILicensingModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicensingModule>;
    deployContract(
      name: "IPILicenseTemplate",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPILicenseTemplate>;
    deployContract(
      name: "ICoreMetadataModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICoreMetadataModule>;
    deployContract(
      name: "ICoreMetadataViewModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICoreMetadataViewModule>;
    deployContract(
      name: "IRoyaltyModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRoyaltyModule>;
    deployContract(
      name: "IExternalRoyaltyPolicy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExternalRoyaltyPolicy>;
    deployContract(
      name: "IExternalRoyaltyPolicyBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExternalRoyaltyPolicyBase>;
    deployContract(
      name: "IGraphAwareRoyaltyPolicy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGraphAwareRoyaltyPolicy>;
    deployContract(
      name: "IIpRoyaltyVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIpRoyaltyVault>;
    deployContract(
      name: "IRoyaltyPolicy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRoyaltyPolicy>;
    deployContract(
      name: "IVaultController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVaultController>;
    deployContract(
      name: "IProtocolPauseAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolPauseAdmin>;
    deployContract(
      name: "IGroupIPAssetRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGroupIPAssetRegistry>;
    deployContract(
      name: "IIPAccountRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPAccountRegistry>;
    deployContract(
      name: "IIPAssetRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIPAssetRegistry>;
    deployContract(
      name: "ILicenseRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILicenseRegistry>;
    deployContract(
      name: "IModuleRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IModuleRegistry>;
    deployContract(
      name: "AccessPermission",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessPermission>;
    deployContract(
      name: "PILFlavors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PILFlavors>;
    deployContract(
      name: "IP_Deposit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IP_Deposit>;
    deployContract(
      name: "StoryNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StoryNFT>;
    deployContract(
      name: "TweetIPFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TweetIPFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
