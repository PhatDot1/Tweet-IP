/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TweetIPFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allCollections"
      | "createTweetCollection"
      | "currencyToken"
      | "ipRegistry"
      | "licenseRegistry"
      | "licensingModule"
      | "metadataModule"
      | "pilTemplate"
      | "registerTweetAsset"
      | "royaltyPolicyLAP"
      | "totalCollections"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allCollections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTweetCollection",
    values: [string, BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ipRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "licenseRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "licensingModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pilTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerTweetAsset",
    values: [
      AddressLike,
      AddressLike,
      string,
      string,
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      string[],
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPolicyLAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollections",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTweetCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipRegistry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "licenseRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "licensingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pilTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTweetAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPolicyLAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollections",
    data: BytesLike
  ): Result;
}

export namespace CollectionCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    collectionAddress: AddressLike,
    handle: string
  ];
  export type OutputTuple = [
    creator: string,
    collectionAddress: string,
    handle: string
  ];
  export interface OutputObject {
    creator: string;
    collectionAddress: string;
    handle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TweetIPFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TweetIPFactory;
  waitForDeployment(): Promise<this>;

  interface: TweetIPFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allCollections: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createTweetCollection: TypedContractMethod<
    [
      handle: string,
      mintPrice: BigNumberish,
      maxSupply: BigNumberish,
      royaltyReceiver: AddressLike,
      royaltyBP: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  currencyToken: TypedContractMethod<[], [string], "view">;

  ipRegistry: TypedContractMethod<[], [string], "view">;

  licenseRegistry: TypedContractMethod<[], [string], "view">;

  licensingModule: TypedContractMethod<[], [string], "view">;

  metadataModule: TypedContractMethod<[], [string], "view">;

  pilTemplate: TypedContractMethod<[], [string], "view">;

  registerTweetAsset: TypedContractMethod<
    [
      collection: AddressLike,
      to: AddressLike,
      uri: string,
      name_: string,
      handle_: string,
      timestamp_: string,
      verified_: boolean,
      comments_: BigNumberish,
      retweets_: BigNumberish,
      likes_: BigNumberish,
      analytics_: BigNumberish,
      tags_: string[],
      mentions_: string[],
      profileImage_: string,
      tweetLink_: string,
      tweetId_: string,
      ipfsScreenshot_: string
    ],
    [void],
    "nonpayable"
  >;

  royaltyPolicyLAP: TypedContractMethod<[], [string], "view">;

  totalCollections: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allCollections"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createTweetCollection"
  ): TypedContractMethod<
    [
      handle: string,
      mintPrice: BigNumberish,
      maxSupply: BigNumberish,
      royaltyReceiver: AddressLike,
      royaltyBP: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currencyToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ipRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "licenseRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "licensingModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "metadataModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pilTemplate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerTweetAsset"
  ): TypedContractMethod<
    [
      collection: AddressLike,
      to: AddressLike,
      uri: string,
      name_: string,
      handle_: string,
      timestamp_: string,
      verified_: boolean,
      comments_: BigNumberish,
      retweets_: BigNumberish,
      likes_: BigNumberish,
      analytics_: BigNumberish,
      tags_: string[],
      mentions_: string[],
      profileImage_: string,
      tweetLink_: string,
      tweetId_: string,
      ipfsScreenshot_: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyPolicyLAP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalCollections"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CollectionCreated"
  ): TypedContractEvent<
    CollectionCreatedEvent.InputTuple,
    CollectionCreatedEvent.OutputTuple,
    CollectionCreatedEvent.OutputObject
  >;

  filters: {
    "CollectionCreated(address,address,string)": TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
    CollectionCreated: TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
  };
}
