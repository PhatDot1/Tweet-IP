/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IP_Deposit {
  export type CollectionConfigStruct = {
    handle: string;
    mintPrice: BigNumberish;
    maxSupply: BigNumberish;
    royaltyReceiver: AddressLike;
    royaltyBP: BigNumberish;
  };

  export type CollectionConfigStructOutput = [
    handle: string,
    mintPrice: bigint,
    maxSupply: bigint,
    royaltyReceiver: string,
    royaltyBP: bigint
  ] & {
    handle: string;
    mintPrice: bigint;
    maxSupply: bigint;
    royaltyReceiver: string;
    royaltyBP: bigint;
  };

  export type LicenseTermsConfigStruct = {
    defaultMintingFee: BigNumberish;
    currency: AddressLike;
    royaltyPolicy: AddressLike;
    transferable: boolean;
    expiration: BigNumberish;
    commercialUse: boolean;
    commercialAttribution: boolean;
    commercialRevShare: BigNumberish;
    commercialRevCeiling: BigNumberish;
    derivativesAllowed: boolean;
    derivativesAttribution: boolean;
    derivativesApproval: boolean;
    derivativesReciprocal: boolean;
    derivativeRevCeiling: BigNumberish;
    uri: string;
  };

  export type LicenseTermsConfigStructOutput = [
    defaultMintingFee: bigint,
    currency: string,
    royaltyPolicy: string,
    transferable: boolean,
    expiration: bigint,
    commercialUse: boolean,
    commercialAttribution: boolean,
    commercialRevShare: bigint,
    commercialRevCeiling: bigint,
    derivativesAllowed: boolean,
    derivativesAttribution: boolean,
    derivativesApproval: boolean,
    derivativesReciprocal: boolean,
    derivativeRevCeiling: bigint,
    uri: string
  ] & {
    defaultMintingFee: bigint;
    currency: string;
    royaltyPolicy: string;
    transferable: boolean;
    expiration: bigint;
    commercialUse: boolean;
    commercialAttribution: boolean;
    commercialRevShare: bigint;
    commercialRevCeiling: bigint;
    derivativesAllowed: boolean;
    derivativesAttribution: boolean;
    derivativesApproval: boolean;
    derivativesReciprocal: boolean;
    derivativeRevCeiling: bigint;
    uri: string;
  };

  export type LicenseMintParamsStruct = {
    licenseTermsId: BigNumberish;
    licensorIpId: AddressLike;
    receiver: AddressLike;
    amount: BigNumberish;
    maxMintingFee: BigNumberish;
    maxRevenueShare: BigNumberish;
  };

  export type LicenseMintParamsStructOutput = [
    licenseTermsId: bigint,
    licensorIpId: string,
    receiver: string,
    amount: bigint,
    maxMintingFee: bigint,
    maxRevenueShare: bigint
  ] & {
    licenseTermsId: bigint;
    licensorIpId: string;
    receiver: string;
    amount: bigint;
    maxMintingFee: bigint;
    maxRevenueShare: bigint;
  };

  export type CoCreatorStruct = { name: string; wallet: AddressLike };

  export type CoCreatorStructOutput = [name: string, wallet: string] & {
    name: string;
    wallet: string;
  };

  export type DepositRecordStruct = {
    depositor: AddressLike;
    recipient: AddressLike;
    validation: string;
    proof: BytesLike;
    collectionAddress: AddressLike;
    collectionConfig: IP_Deposit.CollectionConfigStruct;
    tweetHash: BytesLike;
    licenseTermsConfig: IP_Deposit.LicenseTermsConfigStruct;
    licenseMintParams: IP_Deposit.LicenseMintParamsStruct;
    coCreators: IP_Deposit.CoCreatorStruct[];
  };

  export type DepositRecordStructOutput = [
    depositor: string,
    recipient: string,
    validation: string,
    proof: string,
    collectionAddress: string,
    collectionConfig: IP_Deposit.CollectionConfigStructOutput,
    tweetHash: string,
    licenseTermsConfig: IP_Deposit.LicenseTermsConfigStructOutput,
    licenseMintParams: IP_Deposit.LicenseMintParamsStructOutput,
    coCreators: IP_Deposit.CoCreatorStructOutput[]
  ] & {
    depositor: string;
    recipient: string;
    validation: string;
    proof: string;
    collectionAddress: string;
    collectionConfig: IP_Deposit.CollectionConfigStructOutput;
    tweetHash: string;
    licenseTermsConfig: IP_Deposit.LicenseTermsConfigStructOutput;
    licenseMintParams: IP_Deposit.LicenseMintParamsStructOutput;
    coCreators: IP_Deposit.CoCreatorStructOutput[];
  };
}

export interface IP_DepositInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "depositIP"
      | "getByTweetHash"
      | "owner"
      | "updateValidation"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DepositProcessed" | "ValidationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "depositIP",
    values: [
      AddressLike,
      string,
      BytesLike,
      AddressLike,
      IP_Deposit.CollectionConfigStruct,
      BytesLike,
      IP_Deposit.LicenseTermsConfigStruct,
      IP_Deposit.LicenseMintParamsStruct,
      IP_Deposit.CoCreatorStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getByTweetHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateValidation",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "depositIP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getByTweetHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace DepositProcessedEvent {
  export type InputTuple = [
    ipAmount: BigNumberish,
    tweetHash: BytesLike,
    depositor: AddressLike,
    recipient: AddressLike,
    validation: string,
    collectionAddress: AddressLike,
    collectionConfig: IP_Deposit.CollectionConfigStruct,
    tweetHashOut: BytesLike,
    licenseTermsConfig: IP_Deposit.LicenseTermsConfigStruct,
    licenseMintParams: IP_Deposit.LicenseMintParamsStruct,
    coCreators: IP_Deposit.CoCreatorStruct[]
  ];
  export type OutputTuple = [
    ipAmount: bigint,
    tweetHash: string,
    depositor: string,
    recipient: string,
    validation: string,
    collectionAddress: string,
    collectionConfig: IP_Deposit.CollectionConfigStructOutput,
    tweetHashOut: string,
    licenseTermsConfig: IP_Deposit.LicenseTermsConfigStructOutput,
    licenseMintParams: IP_Deposit.LicenseMintParamsStructOutput,
    coCreators: IP_Deposit.CoCreatorStructOutput[]
  ];
  export interface OutputObject {
    ipAmount: bigint;
    tweetHash: string;
    depositor: string;
    recipient: string;
    validation: string;
    collectionAddress: string;
    collectionConfig: IP_Deposit.CollectionConfigStructOutput;
    tweetHashOut: string;
    licenseTermsConfig: IP_Deposit.LicenseTermsConfigStructOutput;
    licenseMintParams: IP_Deposit.LicenseMintParamsStructOutput;
    coCreators: IP_Deposit.CoCreatorStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationUpdatedEvent {
  export type InputTuple = [tweetHash: BytesLike, newValidation: string];
  export type OutputTuple = [tweetHash: string, newValidation: string];
  export interface OutputObject {
    tweetHash: string;
    newValidation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IP_Deposit extends BaseContract {
  connect(runner?: ContractRunner | null): IP_Deposit;
  waitForDeployment(): Promise<this>;

  interface: IP_DepositInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositIP: TypedContractMethod<
    [
      recipient: AddressLike,
      validation: string,
      proof: BytesLike,
      collectionAddress: AddressLike,
      collectionConfig: IP_Deposit.CollectionConfigStruct,
      tweetHash: BytesLike,
      licenseTermsConfig: IP_Deposit.LicenseTermsConfigStruct,
      licenseMintParams: IP_Deposit.LicenseMintParamsStruct,
      coCreators: IP_Deposit.CoCreatorStruct[]
    ],
    [void],
    "payable"
  >;

  getByTweetHash: TypedContractMethod<
    [tweetHash: BytesLike],
    [IP_Deposit.DepositRecordStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  updateValidation: TypedContractMethod<
    [tweetHash: BytesLike, newValidation: string],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositIP"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      validation: string,
      proof: BytesLike,
      collectionAddress: AddressLike,
      collectionConfig: IP_Deposit.CollectionConfigStruct,
      tweetHash: BytesLike,
      licenseTermsConfig: IP_Deposit.LicenseTermsConfigStruct,
      licenseMintParams: IP_Deposit.LicenseMintParamsStruct,
      coCreators: IP_Deposit.CoCreatorStruct[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getByTweetHash"
  ): TypedContractMethod<
    [tweetHash: BytesLike],
    [IP_Deposit.DepositRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateValidation"
  ): TypedContractMethod<
    [tweetHash: BytesLike, newValidation: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DepositProcessed"
  ): TypedContractEvent<
    DepositProcessedEvent.InputTuple,
    DepositProcessedEvent.OutputTuple,
    DepositProcessedEvent.OutputObject
  >;
  getEvent(
    key: "ValidationUpdated"
  ): TypedContractEvent<
    ValidationUpdatedEvent.InputTuple,
    ValidationUpdatedEvent.OutputTuple,
    ValidationUpdatedEvent.OutputObject
  >;

  filters: {
    "DepositProcessed(uint256,bytes32,address,address,string,address,tuple,bytes32,tuple,tuple,tuple[])": TypedContractEvent<
      DepositProcessedEvent.InputTuple,
      DepositProcessedEvent.OutputTuple,
      DepositProcessedEvent.OutputObject
    >;
    DepositProcessed: TypedContractEvent<
      DepositProcessedEvent.InputTuple,
      DepositProcessedEvent.OutputTuple,
      DepositProcessedEvent.OutputObject
    >;

    "ValidationUpdated(bytes32,string)": TypedContractEvent<
      ValidationUpdatedEvent.InputTuple,
      ValidationUpdatedEvent.OutputTuple,
      ValidationUpdatedEvent.OutputObject
    >;
    ValidationUpdated: TypedContractEvent<
      ValidationUpdatedEvent.InputTuple,
      ValidationUpdatedEvent.OutputTuple,
      ValidationUpdatedEvent.OutputObject
    >;
  };
}
