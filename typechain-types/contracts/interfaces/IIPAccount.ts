/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IIPAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "execute"
      | "executeWithSig"
      | "getBytes(bytes32)"
      | "getBytes(bytes32,bytes32)"
      | "getBytes32(bytes32,bytes32)"
      | "getBytes32(bytes32)"
      | "getBytes32Batch"
      | "getBytesBatch"
      | "isValidSigner"
      | "owner"
      | "setBytes"
      | "setBytes32"
      | "setBytes32Batch"
      | "setBytesBatch"
      | "state"
      | "supportsInterface"
      | "token"
      | "updateStateForValidSigner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Executed" | "ExecutedWithSig"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithSig",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32Batch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytesBatch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSigner",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBytes",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32Batch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytesBatch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateStateForValidSigner",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes32(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes32(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes32Batch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBytes32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBytes32Batch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBytesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStateForValidSigner",
    data: BytesLike
  ): Result;
}

export namespace ExecutedEvent {
  export type InputTuple = [
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
    nonce: BytesLike
  ];
  export type OutputTuple = [
    to: string,
    value: bigint,
    data: string,
    nonce: string
  ];
  export interface OutputObject {
    to: string;
    value: bigint;
    data: string;
    nonce: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedWithSigEvent {
  export type InputTuple = [
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
    nonce: BytesLike,
    deadline: BigNumberish,
    signer: AddressLike,
    signature: BytesLike
  ];
  export type OutputTuple = [
    to: string,
    value: bigint,
    data: string,
    nonce: string,
    deadline: bigint,
    signer: string,
    signature: string
  ];
  export interface OutputObject {
    to: string;
    value: bigint;
    data: string;
    nonce: string;
    deadline: bigint;
    signer: string;
    signature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IIPAccount extends BaseContract {
  connect(runner?: ContractRunner | null): IIPAccount;
  waitForDeployment(): Promise<this>;

  interface: IIPAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  execute: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [string],
    "payable"
  >;

  executeWithSig: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      signer: AddressLike,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "payable"
  >;

  "getBytes(bytes32)": TypedContractMethod<[key: BytesLike], [string], "view">;

  "getBytes(bytes32,bytes32)": TypedContractMethod<
    [namespace: BytesLike, key: BytesLike],
    [string],
    "view"
  >;

  "getBytes32(bytes32,bytes32)": TypedContractMethod<
    [namespace: BytesLike, key: BytesLike],
    [string],
    "view"
  >;

  "getBytes32(bytes32)": TypedContractMethod<
    [key: BytesLike],
    [string],
    "view"
  >;

  getBytes32Batch: TypedContractMethod<
    [namespaces: BytesLike[], keys: BytesLike[]],
    [string[]],
    "view"
  >;

  getBytesBatch: TypedContractMethod<
    [namespaces: BytesLike[], keys: BytesLike[]],
    [string[]],
    "view"
  >;

  isValidSigner: TypedContractMethod<
    [signer: AddressLike, data: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setBytes: TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;

  setBytes32: TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;

  setBytes32Batch: TypedContractMethod<
    [keys: BytesLike[], values: BytesLike[]],
    [void],
    "nonpayable"
  >;

  setBytesBatch: TypedContractMethod<
    [keys: BytesLike[], values: BytesLike[]],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  token: TypedContractMethod<[], [[bigint, string, bigint]], "view">;

  updateStateForValidSigner: TypedContractMethod<
    [signer: AddressLike, to: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeWithSig"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      signer: AddressLike,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBytes(bytes32)"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getBytes(bytes32,bytes32)"
  ): TypedContractMethod<
    [namespace: BytesLike, key: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBytes32(bytes32,bytes32)"
  ): TypedContractMethod<
    [namespace: BytesLike, key: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBytes32(bytes32)"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getBytes32Batch"
  ): TypedContractMethod<
    [namespaces: BytesLike[], keys: BytesLike[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBytesBatch"
  ): TypedContractMethod<
    [namespaces: BytesLike[], keys: BytesLike[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSigner"
  ): TypedContractMethod<
    [signer: AddressLike, data: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBytes"
  ): TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBytes32"
  ): TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBytes32Batch"
  ): TypedContractMethod<
    [keys: BytesLike[], values: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBytesBatch"
  ): TypedContractMethod<
    [keys: BytesLike[], values: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [[bigint, string, bigint]], "view">;
  getFunction(
    nameOrSignature: "updateStateForValidSigner"
  ): TypedContractMethod<
    [signer: AddressLike, to: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutedWithSig"
  ): TypedContractEvent<
    ExecutedWithSigEvent.InputTuple,
    ExecutedWithSigEvent.OutputTuple,
    ExecutedWithSigEvent.OutputObject
  >;

  filters: {
    "Executed(address,uint256,bytes,bytes32)": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;

    "ExecutedWithSig(address,uint256,bytes,bytes32,uint256,address,bytes)": TypedContractEvent<
      ExecutedWithSigEvent.InputTuple,
      ExecutedWithSigEvent.OutputTuple,
      ExecutedWithSigEvent.OutputObject
    >;
    ExecutedWithSig: TypedContractEvent<
      ExecutedWithSigEvent.InputTuple,
      ExecutedWithSigEvent.OutputTuple,
      ExecutedWithSigEvent.OutputObject
    >;
  };
}
