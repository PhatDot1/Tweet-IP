/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace AccessPermission {
  export type PermissionStruct = {
    ipAccount: AddressLike;
    signer: AddressLike;
    to: AddressLike;
    func: BytesLike;
    permission: BigNumberish;
  };

  export type PermissionStructOutput = [
    ipAccount: string,
    signer: string,
    to: string,
    func: string,
    permission: bigint
  ] & {
    ipAccount: string;
    signer: string;
    to: string;
    func: string;
    permission: bigint;
  };
}

export interface IAccessControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkPermission"
      | "getPermanentPermission"
      | "getPermission"
      | "getTransientPermission"
      | "setAllPermissions"
      | "setAllTransientPermissions"
      | "setBatchPermissions"
      | "setBatchTransientPermissions"
      | "setPermission"
      | "setTransientPermission"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PermissionSet" | "TransientPermissionSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkPermission",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermanentPermission",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermission",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransientPermission",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllPermissions",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllTransientPermissions",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchPermissions",
    values: [AccessPermission.PermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchTransientPermissions",
    values: [AccessPermission.PermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [AddressLike, AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransientPermission",
    values: [AddressLike, AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermanentPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransientPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllTransientPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchTransientPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransientPermission",
    data: BytesLike
  ): Result;
}

export namespace PermissionSetEvent {
  export type InputTuple = [
    ipAccountOwner: AddressLike,
    ipAccount: AddressLike,
    signer: AddressLike,
    to: AddressLike,
    func: BytesLike,
    permission: BigNumberish
  ];
  export type OutputTuple = [
    ipAccountOwner: string,
    ipAccount: string,
    signer: string,
    to: string,
    func: string,
    permission: bigint
  ];
  export interface OutputObject {
    ipAccountOwner: string;
    ipAccount: string;
    signer: string;
    to: string;
    func: string;
    permission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransientPermissionSetEvent {
  export type InputTuple = [
    ipAccountOwner: AddressLike,
    ipAccount: AddressLike,
    signer: AddressLike,
    to: AddressLike,
    func: BytesLike,
    permission: BigNumberish
  ];
  export type OutputTuple = [
    ipAccountOwner: string,
    ipAccount: string,
    signer: string,
    to: string,
    func: string,
    permission: bigint
  ];
  export interface OutputObject {
    ipAccountOwner: string;
    ipAccount: string;
    signer: string;
    to: string;
    func: string;
    permission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAccessController extends BaseContract {
  connect(runner?: ContractRunner | null): IAccessController;
  waitForDeployment(): Promise<this>;

  interface: IAccessControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkPermission: TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike
    ],
    [void],
    "view"
  >;

  getPermanentPermission: TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike
    ],
    [bigint],
    "view"
  >;

  getPermission: TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike
    ],
    [bigint],
    "view"
  >;

  getTransientPermission: TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike
    ],
    [bigint],
    "view"
  >;

  setAllPermissions: TypedContractMethod<
    [ipAccount: AddressLike, signer: AddressLike, permission: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAllTransientPermissions: TypedContractMethod<
    [ipAccount: AddressLike, signer: AddressLike, permission: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBatchPermissions: TypedContractMethod<
    [permissions: AccessPermission.PermissionStruct[]],
    [void],
    "nonpayable"
  >;

  setBatchTransientPermissions: TypedContractMethod<
    [permissions: AccessPermission.PermissionStruct[]],
    [void],
    "nonpayable"
  >;

  setPermission: TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike,
      permission: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTransientPermission: TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike,
      permission: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkPermission"
  ): TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermanentPermission"
  ): TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermission"
  ): TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransientPermission"
  ): TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAllPermissions"
  ): TypedContractMethod<
    [ipAccount: AddressLike, signer: AddressLike, permission: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllTransientPermissions"
  ): TypedContractMethod<
    [ipAccount: AddressLike, signer: AddressLike, permission: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBatchPermissions"
  ): TypedContractMethod<
    [permissions: AccessPermission.PermissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBatchTransientPermissions"
  ): TypedContractMethod<
    [permissions: AccessPermission.PermissionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermission"
  ): TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike,
      permission: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTransientPermission"
  ): TypedContractMethod<
    [
      ipAccount: AddressLike,
      signer: AddressLike,
      to: AddressLike,
      func: BytesLike,
      permission: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PermissionSet"
  ): TypedContractEvent<
    PermissionSetEvent.InputTuple,
    PermissionSetEvent.OutputTuple,
    PermissionSetEvent.OutputObject
  >;
  getEvent(
    key: "TransientPermissionSet"
  ): TypedContractEvent<
    TransientPermissionSetEvent.InputTuple,
    TransientPermissionSetEvent.OutputTuple,
    TransientPermissionSetEvent.OutputObject
  >;

  filters: {
    "PermissionSet(address,address,address,address,bytes4,uint8)": TypedContractEvent<
      PermissionSetEvent.InputTuple,
      PermissionSetEvent.OutputTuple,
      PermissionSetEvent.OutputObject
    >;
    PermissionSet: TypedContractEvent<
      PermissionSetEvent.InputTuple,
      PermissionSetEvent.OutputTuple,
      PermissionSetEvent.OutputObject
    >;

    "TransientPermissionSet(address,address,address,address,bytes4,uint8)": TypedContractEvent<
      TransientPermissionSetEvent.InputTuple,
      TransientPermissionSetEvent.OutputTuple,
      TransientPermissionSetEvent.OutputObject
    >;
    TransientPermissionSet: TypedContractEvent<
      TransientPermissionSetEvent.InputTuple,
      TransientPermissionSetEvent.OutputTuple,
      TransientPermissionSetEvent.OutputObject
    >;
  };
}
