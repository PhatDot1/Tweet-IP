/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IIPGraphACLInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "endInternalAccess"
      | "isInternalAccess"
      | "isWhitelisted"
      | "revokeWhitelistedAddress"
      | "startInternalAccess"
      | "whitelistAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RevokedWhitelistedAddress" | "WhitelistedAddress"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "endInternalAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInternalAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeWhitelistedAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startInternalAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddress",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "endInternalAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInternalAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeWhitelistedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startInternalAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddress",
    data: BytesLike
  ): Result;
}

export namespace RevokedWhitelistedAddressEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedAddressEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IIPGraphACL extends BaseContract {
  connect(runner?: ContractRunner | null): IIPGraphACL;
  waitForDeployment(): Promise<this>;

  interface: IIPGraphACLInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  endInternalAccess: TypedContractMethod<[], [void], "nonpayable">;

  isInternalAccess: TypedContractMethod<[], [boolean], "view">;

  isWhitelisted: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  revokeWhitelistedAddress: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  startInternalAccess: TypedContractMethod<[], [void], "nonpayable">;

  whitelistAddress: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "endInternalAccess"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isInternalAccess"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revokeWhitelistedAddress"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startInternalAccess"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistAddress"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "RevokedWhitelistedAddress"
  ): TypedContractEvent<
    RevokedWhitelistedAddressEvent.InputTuple,
    RevokedWhitelistedAddressEvent.OutputTuple,
    RevokedWhitelistedAddressEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedAddress"
  ): TypedContractEvent<
    WhitelistedAddressEvent.InputTuple,
    WhitelistedAddressEvent.OutputTuple,
    WhitelistedAddressEvent.OutputObject
  >;

  filters: {
    "RevokedWhitelistedAddress(address)": TypedContractEvent<
      RevokedWhitelistedAddressEvent.InputTuple,
      RevokedWhitelistedAddressEvent.OutputTuple,
      RevokedWhitelistedAddressEvent.OutputObject
    >;
    RevokedWhitelistedAddress: TypedContractEvent<
      RevokedWhitelistedAddressEvent.InputTuple,
      RevokedWhitelistedAddressEvent.OutputTuple,
      RevokedWhitelistedAddressEvent.OutputObject
    >;

    "WhitelistedAddress(address)": TypedContractEvent<
      WhitelistedAddressEvent.InputTuple,
      WhitelistedAddressEvent.OutputTuple,
      WhitelistedAddressEvent.OutputObject
    >;
    WhitelistedAddress: TypedContractEvent<
      WhitelistedAddressEvent.InputTuple,
      WhitelistedAddressEvent.OutputTuple,
      WhitelistedAddressEvent.OutputObject
    >;
  };
}
