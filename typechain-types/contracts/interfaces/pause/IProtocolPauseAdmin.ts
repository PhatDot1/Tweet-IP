/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IProtocolPauseAdminInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPausable"
      | "isAllProtocolPaused"
      | "isPausableRegistered"
      | "pausables"
      | "pause"
      | "removePausable"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PausableAdded"
      | "PausableRemoved"
      | "ProtocolPaused"
      | "ProtocolUnpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPausable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllProtocolPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPausableRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pausables", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePausable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addPausable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllProtocolPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPausableRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pausables", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePausable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace PausableAddedEvent {
  export type InputTuple = [pausable: AddressLike];
  export type OutputTuple = [pausable: string];
  export interface OutputObject {
    pausable: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausableRemovedEvent {
  export type InputTuple = [pausable: AddressLike];
  export type OutputTuple = [pausable: string];
  export interface OutputObject {
    pausable: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolPausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolUnpausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IProtocolPauseAdmin extends BaseContract {
  connect(runner?: ContractRunner | null): IProtocolPauseAdmin;
  waitForDeployment(): Promise<this>;

  interface: IProtocolPauseAdminInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPausable: TypedContractMethod<
    [pausable: AddressLike],
    [void],
    "nonpayable"
  >;

  isAllProtocolPaused: TypedContractMethod<[], [boolean], "view">;

  isPausableRegistered: TypedContractMethod<
    [pausable: AddressLike],
    [boolean],
    "view"
  >;

  pausables: TypedContractMethod<[], [string[]], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  removePausable: TypedContractMethod<
    [pausable: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPausable"
  ): TypedContractMethod<[pausable: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAllProtocolPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPausableRegistered"
  ): TypedContractMethod<[pausable: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pausables"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removePausable"
  ): TypedContractMethod<[pausable: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "PausableAdded"
  ): TypedContractEvent<
    PausableAddedEvent.InputTuple,
    PausableAddedEvent.OutputTuple,
    PausableAddedEvent.OutputObject
  >;
  getEvent(
    key: "PausableRemoved"
  ): TypedContractEvent<
    PausableRemovedEvent.InputTuple,
    PausableRemovedEvent.OutputTuple,
    PausableRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolPaused"
  ): TypedContractEvent<
    ProtocolPausedEvent.InputTuple,
    ProtocolPausedEvent.OutputTuple,
    ProtocolPausedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolUnpaused"
  ): TypedContractEvent<
    ProtocolUnpausedEvent.InputTuple,
    ProtocolUnpausedEvent.OutputTuple,
    ProtocolUnpausedEvent.OutputObject
  >;

  filters: {
    "PausableAdded(address)": TypedContractEvent<
      PausableAddedEvent.InputTuple,
      PausableAddedEvent.OutputTuple,
      PausableAddedEvent.OutputObject
    >;
    PausableAdded: TypedContractEvent<
      PausableAddedEvent.InputTuple,
      PausableAddedEvent.OutputTuple,
      PausableAddedEvent.OutputObject
    >;

    "PausableRemoved(address)": TypedContractEvent<
      PausableRemovedEvent.InputTuple,
      PausableRemovedEvent.OutputTuple,
      PausableRemovedEvent.OutputObject
    >;
    PausableRemoved: TypedContractEvent<
      PausableRemovedEvent.InputTuple,
      PausableRemovedEvent.OutputTuple,
      PausableRemovedEvent.OutputObject
    >;

    "ProtocolPaused()": TypedContractEvent<
      ProtocolPausedEvent.InputTuple,
      ProtocolPausedEvent.OutputTuple,
      ProtocolPausedEvent.OutputObject
    >;
    ProtocolPaused: TypedContractEvent<
      ProtocolPausedEvent.InputTuple,
      ProtocolPausedEvent.OutputTuple,
      ProtocolPausedEvent.OutputObject
    >;

    "ProtocolUnpaused()": TypedContractEvent<
      ProtocolUnpausedEvent.InputTuple,
      ProtocolUnpausedEvent.OutputTuple,
      ProtocolUnpausedEvent.OutputObject
    >;
    ProtocolUnpaused: TypedContractEvent<
      ProtocolUnpausedEvent.InputTuple,
      ProtocolUnpausedEvent.OutputTuple,
      ProtocolUnpausedEvent.OutputObject
    >;
  };
}
