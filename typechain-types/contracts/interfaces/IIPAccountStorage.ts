/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IIPAccountStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBytes(bytes32)"
      | "getBytes(bytes32,bytes32)"
      | "getBytes32(bytes32,bytes32)"
      | "getBytes32(bytes32)"
      | "getBytes32Batch"
      | "getBytesBatch"
      | "setBytes"
      | "setBytes32"
      | "setBytes32Batch"
      | "setBytesBatch"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBytes(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32Batch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytesBatch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32Batch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytesBatch",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBytes(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes32(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes32(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes32Batch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBytes32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBytes32Batch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBytesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface IIPAccountStorage extends BaseContract {
  connect(runner?: ContractRunner | null): IIPAccountStorage;
  waitForDeployment(): Promise<this>;

  interface: IIPAccountStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "getBytes(bytes32)": TypedContractMethod<[key: BytesLike], [string], "view">;

  "getBytes(bytes32,bytes32)": TypedContractMethod<
    [namespace: BytesLike, key: BytesLike],
    [string],
    "view"
  >;

  "getBytes32(bytes32,bytes32)": TypedContractMethod<
    [namespace: BytesLike, key: BytesLike],
    [string],
    "view"
  >;

  "getBytes32(bytes32)": TypedContractMethod<
    [key: BytesLike],
    [string],
    "view"
  >;

  getBytes32Batch: TypedContractMethod<
    [namespaces: BytesLike[], keys: BytesLike[]],
    [string[]],
    "view"
  >;

  getBytesBatch: TypedContractMethod<
    [namespaces: BytesLike[], keys: BytesLike[]],
    [string[]],
    "view"
  >;

  setBytes: TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;

  setBytes32: TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;

  setBytes32Batch: TypedContractMethod<
    [keys: BytesLike[], values: BytesLike[]],
    [void],
    "nonpayable"
  >;

  setBytesBatch: TypedContractMethod<
    [keys: BytesLike[], values: BytesLike[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBytes(bytes32)"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getBytes(bytes32,bytes32)"
  ): TypedContractMethod<
    [namespace: BytesLike, key: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBytes32(bytes32,bytes32)"
  ): TypedContractMethod<
    [namespace: BytesLike, key: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBytes32(bytes32)"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getBytes32Batch"
  ): TypedContractMethod<
    [namespaces: BytesLike[], keys: BytesLike[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBytesBatch"
  ): TypedContractMethod<
    [namespaces: BytesLike[], keys: BytesLike[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setBytes"
  ): TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBytes32"
  ): TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBytes32Batch"
  ): TypedContractMethod<
    [keys: BytesLike[], values: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBytesBatch"
  ): TypedContractMethod<
    [keys: BytesLike[], values: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
