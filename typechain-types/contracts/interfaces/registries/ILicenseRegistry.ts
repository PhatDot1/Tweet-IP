/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Licensing {
  export type LicensingConfigStruct = {
    isSet: boolean;
    mintingFee: BigNumberish;
    licensingHook: AddressLike;
    hookData: BytesLike;
    commercialRevShare: BigNumberish;
    disabled: boolean;
    expectMinimumGroupRewardShare: BigNumberish;
    expectGroupRewardPool: AddressLike;
  };

  export type LicensingConfigStructOutput = [
    isSet: boolean,
    mintingFee: bigint,
    licensingHook: string,
    hookData: string,
    commercialRevShare: bigint,
    disabled: boolean,
    expectMinimumGroupRewardShare: bigint,
    expectGroupRewardPool: string
  ] & {
    isSet: boolean;
    mintingFee: bigint;
    licensingHook: string;
    hookData: string;
    commercialRevShare: bigint;
    disabled: boolean;
    expectMinimumGroupRewardShare: bigint;
    expectGroupRewardPool: string;
  };
}

export interface ILicenseRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attachLicenseTermsToIp"
      | "exists"
      | "getAncestorsCount"
      | "getAttachedLicenseTerms"
      | "getAttachedLicenseTermsCount"
      | "getDefaultLicenseTerms"
      | "getDerivativeIp"
      | "getDerivativeIpCount"
      | "getExpireTime"
      | "getLicensingConfig"
      | "getParentIp"
      | "getParentIpCount"
      | "getParentLicenseTerms"
      | "getRoyaltyPercent"
      | "hasDerivativeIps"
      | "hasIpAttachedLicenseTerms"
      | "initializeLicenseTemplate"
      | "isDefaultLicense"
      | "isDerivativeIp"
      | "isExpiredNow"
      | "isParentIp"
      | "isRegisteredLicenseTemplate"
      | "registerDerivativeIp"
      | "registerLicenseTemplate"
      | "setDefaultLicenseTerms"
      | "setLicensingConfigForLicense"
      | "verifyGroupAddIp"
      | "verifyMintLicenseToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DefaultLicenseTermsSet"
      | "ExpirationTimeSet"
      | "LicenseTemplateRegistered"
      | "LicensingConfigSetForLicense"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attachLicenseTermsToIp",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAncestorsCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttachedLicenseTerms",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttachedLicenseTermsCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultLicenseTerms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivativeIp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivativeIpCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpireTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicensingConfig",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentIp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentIpCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentLicenseTerms",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyPercent",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDerivativeIps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasIpAttachedLicenseTerms",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeLicenseTemplate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDefaultLicense",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDerivativeIp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpiredNow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isParentIp",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredLicenseTemplate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDerivativeIp",
    values: [AddressLike, AddressLike[], AddressLike, BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLicenseTemplate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultLicenseTerms",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLicensingConfigForLicense",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      Licensing.LicensingConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyGroupAddIp",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMintLicenseToken",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "attachLicenseTermsToIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAncestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttachedLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttachedLicenseTermsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivativeIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivativeIpCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLicensingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentIpCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDerivativeIps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasIpAttachedLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeLicenseTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDefaultLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDerivativeIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExpiredNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isParentIp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredLicenseTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDerivativeIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLicenseTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultLicenseTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLicensingConfigForLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyGroupAddIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMintLicenseToken",
    data: BytesLike
  ): Result;
}

export namespace DefaultLicenseTermsSetEvent {
  export type InputTuple = [
    licenseTemplate: AddressLike,
    licenseTermsId: BigNumberish
  ];
  export type OutputTuple = [licenseTemplate: string, licenseTermsId: bigint];
  export interface OutputObject {
    licenseTemplate: string;
    licenseTermsId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpirationTimeSetEvent {
  export type InputTuple = [ipId: AddressLike, expireTime: BigNumberish];
  export type OutputTuple = [ipId: string, expireTime: bigint];
  export interface OutputObject {
    ipId: string;
    expireTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseTemplateRegisteredEvent {
  export type InputTuple = [licenseTemplate: AddressLike];
  export type OutputTuple = [licenseTemplate: string];
  export interface OutputObject {
    licenseTemplate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicensingConfigSetForLicenseEvent {
  export type InputTuple = [
    ipId: AddressLike,
    licenseTemplate: AddressLike,
    licenseTermsId: BigNumberish,
    licensingConfig: Licensing.LicensingConfigStruct
  ];
  export type OutputTuple = [
    ipId: string,
    licenseTemplate: string,
    licenseTermsId: bigint,
    licensingConfig: Licensing.LicensingConfigStructOutput
  ];
  export interface OutputObject {
    ipId: string;
    licenseTemplate: string;
    licenseTermsId: bigint;
    licensingConfig: Licensing.LicensingConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILicenseRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ILicenseRegistry;
  waitForDeployment(): Promise<this>;

  interface: ILicenseRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attachLicenseTermsToIp: TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  exists: TypedContractMethod<
    [licenseTemplate: AddressLike, licenseTermsId: BigNumberish],
    [boolean],
    "view"
  >;

  getAncestorsCount: TypedContractMethod<
    [ipId: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getAttachedLicenseTerms: TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [[string, bigint] & { licenseTemplate: string; licenseTermsId: bigint }],
    "view"
  >;

  getAttachedLicenseTermsCount: TypedContractMethod<
    [ipId: AddressLike],
    [bigint],
    "view"
  >;

  getDefaultLicenseTerms: TypedContractMethod<
    [],
    [[string, bigint] & { licenseTemplate: string; licenseTermsId: bigint }],
    "view"
  >;

  getDerivativeIp: TypedContractMethod<
    [parentIpId: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  getDerivativeIpCount: TypedContractMethod<
    [parentIpId: AddressLike],
    [bigint],
    "view"
  >;

  getExpireTime: TypedContractMethod<[ipId: AddressLike], [bigint], "view">;

  getLicensingConfig: TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish
    ],
    [Licensing.LicensingConfigStructOutput],
    "view"
  >;

  getParentIp: TypedContractMethod<
    [childIpId: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  getParentIpCount: TypedContractMethod<
    [childIpId: AddressLike],
    [bigint],
    "view"
  >;

  getParentLicenseTerms: TypedContractMethod<
    [childIpId: AddressLike, parentIpId: AddressLike],
    [[string, bigint] & { licenseTemplate: string; licenseTermsId: bigint }],
    "view"
  >;

  getRoyaltyPercent: TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish
    ],
    [bigint],
    "view"
  >;

  hasDerivativeIps: TypedContractMethod<[ipId: AddressLike], [boolean], "view">;

  hasIpAttachedLicenseTerms: TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish
    ],
    [boolean],
    "view"
  >;

  initializeLicenseTemplate: TypedContractMethod<
    [ipId: AddressLike, licenseTemplate: AddressLike],
    [void],
    "nonpayable"
  >;

  isDefaultLicense: TypedContractMethod<
    [licenseTemplate: AddressLike, licenseTermsId: BigNumberish],
    [boolean],
    "view"
  >;

  isDerivativeIp: TypedContractMethod<[ipId: AddressLike], [boolean], "view">;

  isExpiredNow: TypedContractMethod<[ipId: AddressLike], [boolean], "view">;

  isParentIp: TypedContractMethod<
    [parentIpId: AddressLike, childIpId: AddressLike],
    [boolean],
    "view"
  >;

  isRegisteredLicenseTemplate: TypedContractMethod<
    [licenseTemplate: AddressLike],
    [boolean],
    "view"
  >;

  registerDerivativeIp: TypedContractMethod<
    [
      ipId: AddressLike,
      parentIpIds: AddressLike[],
      licenseTemplate: AddressLike,
      licenseTermsIds: BigNumberish[],
      isUsingLicenseToken: boolean
    ],
    [void],
    "nonpayable"
  >;

  registerLicenseTemplate: TypedContractMethod<
    [licenseTemplate: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultLicenseTerms: TypedContractMethod<
    [newLicenseTemplate: AddressLike, newLicenseTermsId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLicensingConfigForLicense: TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish,
      licensingConfig: Licensing.LicensingConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  verifyGroupAddIp: TypedContractMethod<
    [
      groupId: AddressLike,
      groupRewardPool: AddressLike,
      ipId: AddressLike,
      groupLicenseTemplate: AddressLike,
      groupLicenseTermsId: BigNumberish
    ],
    [Licensing.LicensingConfigStructOutput],
    "view"
  >;

  verifyMintLicenseToken: TypedContractMethod<
    [
      licensorIpId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish,
      isMintedByIpOwner: boolean
    ],
    [Licensing.LicensingConfigStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attachLicenseTermsToIp"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<
    [licenseTemplate: AddressLike, licenseTermsId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAncestorsCount"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getAttachedLicenseTerms"
  ): TypedContractMethod<
    [ipId: AddressLike, index: BigNumberish],
    [[string, bigint] & { licenseTemplate: string; licenseTermsId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAttachedLicenseTermsCount"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDefaultLicenseTerms"
  ): TypedContractMethod<
    [],
    [[string, bigint] & { licenseTemplate: string; licenseTermsId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDerivativeIp"
  ): TypedContractMethod<
    [parentIpId: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDerivativeIpCount"
  ): TypedContractMethod<[parentIpId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpireTime"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLicensingConfig"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish
    ],
    [Licensing.LicensingConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParentIp"
  ): TypedContractMethod<
    [childIpId: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParentIpCount"
  ): TypedContractMethod<[childIpId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getParentLicenseTerms"
  ): TypedContractMethod<
    [childIpId: AddressLike, parentIpId: AddressLike],
    [[string, bigint] & { licenseTemplate: string; licenseTermsId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoyaltyPercent"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasDerivativeIps"
  ): TypedContractMethod<[ipId: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasIpAttachedLicenseTerms"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeLicenseTemplate"
  ): TypedContractMethod<
    [ipId: AddressLike, licenseTemplate: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDefaultLicense"
  ): TypedContractMethod<
    [licenseTemplate: AddressLike, licenseTermsId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDerivativeIp"
  ): TypedContractMethod<[ipId: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExpiredNow"
  ): TypedContractMethod<[ipId: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isParentIp"
  ): TypedContractMethod<
    [parentIpId: AddressLike, childIpId: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegisteredLicenseTemplate"
  ): TypedContractMethod<[licenseTemplate: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerDerivativeIp"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      parentIpIds: AddressLike[],
      licenseTemplate: AddressLike,
      licenseTermsIds: BigNumberish[],
      isUsingLicenseToken: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerLicenseTemplate"
  ): TypedContractMethod<[licenseTemplate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultLicenseTerms"
  ): TypedContractMethod<
    [newLicenseTemplate: AddressLike, newLicenseTermsId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLicensingConfigForLicense"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish,
      licensingConfig: Licensing.LicensingConfigStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyGroupAddIp"
  ): TypedContractMethod<
    [
      groupId: AddressLike,
      groupRewardPool: AddressLike,
      ipId: AddressLike,
      groupLicenseTemplate: AddressLike,
      groupLicenseTermsId: BigNumberish
    ],
    [Licensing.LicensingConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyMintLicenseToken"
  ): TypedContractMethod<
    [
      licensorIpId: AddressLike,
      licenseTemplate: AddressLike,
      licenseTermsId: BigNumberish,
      isMintedByIpOwner: boolean
    ],
    [Licensing.LicensingConfigStructOutput],
    "view"
  >;

  getEvent(
    key: "DefaultLicenseTermsSet"
  ): TypedContractEvent<
    DefaultLicenseTermsSetEvent.InputTuple,
    DefaultLicenseTermsSetEvent.OutputTuple,
    DefaultLicenseTermsSetEvent.OutputObject
  >;
  getEvent(
    key: "ExpirationTimeSet"
  ): TypedContractEvent<
    ExpirationTimeSetEvent.InputTuple,
    ExpirationTimeSetEvent.OutputTuple,
    ExpirationTimeSetEvent.OutputObject
  >;
  getEvent(
    key: "LicenseTemplateRegistered"
  ): TypedContractEvent<
    LicenseTemplateRegisteredEvent.InputTuple,
    LicenseTemplateRegisteredEvent.OutputTuple,
    LicenseTemplateRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "LicensingConfigSetForLicense"
  ): TypedContractEvent<
    LicensingConfigSetForLicenseEvent.InputTuple,
    LicensingConfigSetForLicenseEvent.OutputTuple,
    LicensingConfigSetForLicenseEvent.OutputObject
  >;

  filters: {
    "DefaultLicenseTermsSet(address,uint256)": TypedContractEvent<
      DefaultLicenseTermsSetEvent.InputTuple,
      DefaultLicenseTermsSetEvent.OutputTuple,
      DefaultLicenseTermsSetEvent.OutputObject
    >;
    DefaultLicenseTermsSet: TypedContractEvent<
      DefaultLicenseTermsSetEvent.InputTuple,
      DefaultLicenseTermsSetEvent.OutputTuple,
      DefaultLicenseTermsSetEvent.OutputObject
    >;

    "ExpirationTimeSet(address,uint256)": TypedContractEvent<
      ExpirationTimeSetEvent.InputTuple,
      ExpirationTimeSetEvent.OutputTuple,
      ExpirationTimeSetEvent.OutputObject
    >;
    ExpirationTimeSet: TypedContractEvent<
      ExpirationTimeSetEvent.InputTuple,
      ExpirationTimeSetEvent.OutputTuple,
      ExpirationTimeSetEvent.OutputObject
    >;

    "LicenseTemplateRegistered(address)": TypedContractEvent<
      LicenseTemplateRegisteredEvent.InputTuple,
      LicenseTemplateRegisteredEvent.OutputTuple,
      LicenseTemplateRegisteredEvent.OutputObject
    >;
    LicenseTemplateRegistered: TypedContractEvent<
      LicenseTemplateRegisteredEvent.InputTuple,
      LicenseTemplateRegisteredEvent.OutputTuple,
      LicenseTemplateRegisteredEvent.OutputObject
    >;

    "LicensingConfigSetForLicense(address,address,uint256,tuple)": TypedContractEvent<
      LicensingConfigSetForLicenseEvent.InputTuple,
      LicensingConfigSetForLicenseEvent.OutputTuple,
      LicensingConfigSetForLicenseEvent.OutputObject
    >;
    LicensingConfigSetForLicense: TypedContractEvent<
      LicensingConfigSetForLicenseEvent.InputTuple,
      LicensingConfigSetForLicenseEvent.OutputTuple,
      LicensingConfigSetForLicenseEvent.OutputObject
    >;
  };
}
