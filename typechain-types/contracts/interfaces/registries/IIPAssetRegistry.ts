/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IIPAssetRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFeeAmount"
      | "getFeeToken"
      | "getIPAccountImpl"
      | "getTreasury"
      | "ipAccount"
      | "ipId"
      | "isRegistered"
      | "register"
      | "setRegistrationFee"
      | "totalSupply"
      | "upgradeIPAccountImpl"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IPAccountRegistered"
      | "IPRegistered"
      | "IPRegistrationFeePaid"
      | "RegistrationFeeSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIPAccountImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ipAccount",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipId",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrationFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeIPAccountImpl",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIPAccountImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ipId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeIPAccountImpl",
    data: BytesLike
  ): Result;
}

export namespace IPAccountRegisteredEvent {
  export type InputTuple = [
    account: AddressLike,
    implementation: AddressLike,
    chainId: BigNumberish,
    tokenContract: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    implementation: string,
    chainId: bigint,
    tokenContract: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    account: string;
    implementation: string;
    chainId: bigint;
    tokenContract: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IPRegisteredEvent {
  export type InputTuple = [
    ipId: AddressLike,
    chainId: BigNumberish,
    tokenContract: AddressLike,
    tokenId: BigNumberish,
    name: string,
    uri: string,
    registrationDate: BigNumberish
  ];
  export type OutputTuple = [
    ipId: string,
    chainId: bigint,
    tokenContract: string,
    tokenId: bigint,
    name: string,
    uri: string,
    registrationDate: bigint
  ];
  export interface OutputObject {
    ipId: string;
    chainId: bigint;
    tokenContract: string;
    tokenId: bigint;
    name: string;
    uri: string;
    registrationDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IPRegistrationFeePaidEvent {
  export type InputTuple = [
    payer: AddressLike,
    treasury: AddressLike,
    feeToken: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    treasury: string,
    feeToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    payer: string;
    treasury: string;
    feeToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationFeeSetEvent {
  export type InputTuple = [
    treasury: AddressLike,
    feeToken: AddressLike,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    treasury: string,
    feeToken: string,
    feeAmount: bigint
  ];
  export interface OutputObject {
    treasury: string;
    feeToken: string;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IIPAssetRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IIPAssetRegistry;
  waitForDeployment(): Promise<this>;

  interface: IIPAssetRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFeeAmount: TypedContractMethod<[], [bigint], "view">;

  getFeeToken: TypedContractMethod<[], [string], "view">;

  getIPAccountImpl: TypedContractMethod<[], [string], "view">;

  getTreasury: TypedContractMethod<[], [string], "view">;

  ipAccount: TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  ipId: TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  isRegistered: TypedContractMethod<[id: AddressLike], [boolean], "view">;

  register: TypedContractMethod<
    [chainid: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "nonpayable"
  >;

  setRegistrationFee: TypedContractMethod<
    [treasury: AddressLike, feeToken: AddressLike, feeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  upgradeIPAccountImpl: TypedContractMethod<
    [newIpAccountImpl: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFeeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIPAccountImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ipAccount"
  ): TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "ipId"
  ): TypedContractMethod<
    [chainId: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[id: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [chainid: BigNumberish, tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRegistrationFee"
  ): TypedContractMethod<
    [treasury: AddressLike, feeToken: AddressLike, feeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upgradeIPAccountImpl"
  ): TypedContractMethod<[newIpAccountImpl: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "IPAccountRegistered"
  ): TypedContractEvent<
    IPAccountRegisteredEvent.InputTuple,
    IPAccountRegisteredEvent.OutputTuple,
    IPAccountRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IPRegistered"
  ): TypedContractEvent<
    IPRegisteredEvent.InputTuple,
    IPRegisteredEvent.OutputTuple,
    IPRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IPRegistrationFeePaid"
  ): TypedContractEvent<
    IPRegistrationFeePaidEvent.InputTuple,
    IPRegistrationFeePaidEvent.OutputTuple,
    IPRegistrationFeePaidEvent.OutputObject
  >;
  getEvent(
    key: "RegistrationFeeSet"
  ): TypedContractEvent<
    RegistrationFeeSetEvent.InputTuple,
    RegistrationFeeSetEvent.OutputTuple,
    RegistrationFeeSetEvent.OutputObject
  >;

  filters: {
    "IPAccountRegistered(address,address,uint256,address,uint256)": TypedContractEvent<
      IPAccountRegisteredEvent.InputTuple,
      IPAccountRegisteredEvent.OutputTuple,
      IPAccountRegisteredEvent.OutputObject
    >;
    IPAccountRegistered: TypedContractEvent<
      IPAccountRegisteredEvent.InputTuple,
      IPAccountRegisteredEvent.OutputTuple,
      IPAccountRegisteredEvent.OutputObject
    >;

    "IPRegistered(address,uint256,address,uint256,string,string,uint256)": TypedContractEvent<
      IPRegisteredEvent.InputTuple,
      IPRegisteredEvent.OutputTuple,
      IPRegisteredEvent.OutputObject
    >;
    IPRegistered: TypedContractEvent<
      IPRegisteredEvent.InputTuple,
      IPRegisteredEvent.OutputTuple,
      IPRegisteredEvent.OutputObject
    >;

    "IPRegistrationFeePaid(address,address,address,uint96)": TypedContractEvent<
      IPRegistrationFeePaidEvent.InputTuple,
      IPRegistrationFeePaidEvent.OutputTuple,
      IPRegistrationFeePaidEvent.OutputObject
    >;
    IPRegistrationFeePaid: TypedContractEvent<
      IPRegistrationFeePaidEvent.InputTuple,
      IPRegistrationFeePaidEvent.OutputTuple,
      IPRegistrationFeePaidEvent.OutputObject
    >;

    "RegistrationFeeSet(address,address,uint96)": TypedContractEvent<
      RegistrationFeeSetEvent.InputTuple,
      RegistrationFeeSetEvent.OutputTuple,
      RegistrationFeeSetEvent.OutputObject
    >;
    RegistrationFeeSet: TypedContractEvent<
      RegistrationFeeSetEvent.InputTuple,
      RegistrationFeeSetEvent.OutputTuple,
      RegistrationFeeSetEvent.OutputObject
    >;
  };
}
