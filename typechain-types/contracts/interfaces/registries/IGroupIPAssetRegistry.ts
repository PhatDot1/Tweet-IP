/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IGroupIPAssetRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addGroupMember"
      | "containsIp"
      | "getGroupMembers"
      | "getGroupRewardPool"
      | "isRegisteredGroup"
      | "isWhitelistedGroupRewardPool"
      | "registerGroup"
      | "removeGroupMember"
      | "totalMembers"
      | "whitelistGroupRewardPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGroupMember",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "containsIp",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupMembers",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupRewardPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredGroup",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedGroupRewardPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerGroup",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGroupMember",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMembers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistGroupRewardPool",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGroupMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "containsIp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGroupMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedGroupRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGroupMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistGroupRewardPool",
    data: BytesLike
  ): Result;
}

export interface IGroupIPAssetRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IGroupIPAssetRegistry;
  waitForDeployment(): Promise<this>;

  interface: IGroupIPAssetRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addGroupMember: TypedContractMethod<
    [groupId: AddressLike, ipIds: AddressLike[]],
    [void],
    "nonpayable"
  >;

  containsIp: TypedContractMethod<
    [groupId: AddressLike, ipId: AddressLike],
    [boolean],
    "view"
  >;

  getGroupMembers: TypedContractMethod<
    [groupId: AddressLike, startIndex: BigNumberish, size: BigNumberish],
    [string[]],
    "view"
  >;

  getGroupRewardPool: TypedContractMethod<
    [groupId: AddressLike],
    [string],
    "view"
  >;

  isRegisteredGroup: TypedContractMethod<
    [groupId: AddressLike],
    [boolean],
    "view"
  >;

  isWhitelistedGroupRewardPool: TypedContractMethod<
    [rewardPool: AddressLike],
    [boolean],
    "view"
  >;

  registerGroup: TypedContractMethod<
    [
      groupNft: AddressLike,
      groupNftId: BigNumberish,
      rewardPool: AddressLike,
      registerFeePayer: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  removeGroupMember: TypedContractMethod<
    [groupId: AddressLike, ipIds: AddressLike[]],
    [void],
    "nonpayable"
  >;

  totalMembers: TypedContractMethod<[groupId: AddressLike], [bigint], "view">;

  whitelistGroupRewardPool: TypedContractMethod<
    [rewardPool: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addGroupMember"
  ): TypedContractMethod<
    [groupId: AddressLike, ipIds: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "containsIp"
  ): TypedContractMethod<
    [groupId: AddressLike, ipId: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGroupMembers"
  ): TypedContractMethod<
    [groupId: AddressLike, startIndex: BigNumberish, size: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGroupRewardPool"
  ): TypedContractMethod<[groupId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isRegisteredGroup"
  ): TypedContractMethod<[groupId: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelistedGroupRewardPool"
  ): TypedContractMethod<[rewardPool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerGroup"
  ): TypedContractMethod<
    [
      groupNft: AddressLike,
      groupNftId: BigNumberish,
      rewardPool: AddressLike,
      registerFeePayer: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeGroupMember"
  ): TypedContractMethod<
    [groupId: AddressLike, ipIds: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalMembers"
  ): TypedContractMethod<[groupId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistGroupRewardPool"
  ): TypedContractMethod<
    [rewardPool: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
