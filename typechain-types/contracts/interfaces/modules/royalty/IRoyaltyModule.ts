/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IRoyaltyModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accumulatedRoyaltyPolicies"
      | "deployVault"
      | "globalRoyaltyStack"
      | "hasAncestorIp"
      | "ipRoyaltyVaults"
      | "isIpRoyaltyVault"
      | "isRegisteredExternalRoyaltyPolicy"
      | "isWhitelistedRoyaltyPolicy"
      | "isWhitelistedRoyaltyToken"
      | "maxAccumulatedRoyaltyPolicies"
      | "maxAncestors"
      | "maxParents"
      | "maxPercent"
      | "name"
      | "onLicenseMinting"
      | "onLinkToParents"
      | "payLicenseMintingFee"
      | "payRoyaltyOnBehalf"
      | "registerExternalRoyaltyPolicy"
      | "royaltyFeePercent"
      | "setRoyaltyFeePercent"
      | "setRoyaltyLimits"
      | "setTreasury"
      | "supportsInterface"
      | "totalRevenueTokensAccounted"
      | "totalRevenueTokensReceived"
      | "treasury"
      | "whitelistRoyaltyPolicy"
      | "whitelistRoyaltyToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExternalRoyaltyPolicyRegistered"
      | "IpRoyaltyVaultDeployed"
      | "LicenseMintingFeePaid"
      | "LicensedWithRoyalty"
      | "LinkedToParents"
      | "RoyaltyFeePercentSet"
      | "RoyaltyLimitsUpdated"
      | "RoyaltyPaid"
      | "RoyaltyPolicyWhitelistUpdated"
      | "RoyaltyTokenWhitelistUpdated"
      | "TreasurySet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accumulatedRoyaltyPolicies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalRoyaltyStack",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAncestorIp",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ipRoyaltyVaults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIpRoyaltyVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredExternalRoyaltyPolicy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedRoyaltyPolicy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedRoyaltyToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAccumulatedRoyaltyPolicies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAncestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxParents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onLicenseMinting",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onLinkToParents",
    values: [
      AddressLike,
      AddressLike[],
      AddressLike[],
      BigNumberish[],
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payLicenseMintingFee",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payRoyaltyOnBehalf",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExternalRoyaltyPolicy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyLimits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRevenueTokensAccounted",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRevenueTokensReceived",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistRoyaltyPolicy",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRoyaltyToken",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulatedRoyaltyPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalRoyaltyStack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAncestorIp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipRoyaltyVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIpRoyaltyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredExternalRoyaltyPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedRoyaltyPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedRoyaltyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAccumulatedRoyaltyPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAncestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxParents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onLicenseMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLinkToParents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payLicenseMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payRoyaltyOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExternalRoyaltyPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRevenueTokensAccounted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRevenueTokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRoyaltyPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRoyaltyToken",
    data: BytesLike
  ): Result;
}

export namespace ExternalRoyaltyPolicyRegisteredEvent {
  export type InputTuple = [externalRoyaltyPolicy: AddressLike];
  export type OutputTuple = [externalRoyaltyPolicy: string];
  export interface OutputObject {
    externalRoyaltyPolicy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IpRoyaltyVaultDeployedEvent {
  export type InputTuple = [ipId: AddressLike, ipRoyaltyVault: AddressLike];
  export type OutputTuple = [ipId: string, ipRoyaltyVault: string];
  export interface OutputObject {
    ipId: string;
    ipRoyaltyVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseMintingFeePaidEvent {
  export type InputTuple = [
    receiverIpId: AddressLike,
    payerAddress: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    amountAfterFee: BigNumberish
  ];
  export type OutputTuple = [
    receiverIpId: string,
    payerAddress: string,
    token: string,
    amount: bigint,
    amountAfterFee: bigint
  ];
  export interface OutputObject {
    receiverIpId: string;
    payerAddress: string;
    token: string;
    amount: bigint;
    amountAfterFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicensedWithRoyaltyEvent {
  export type InputTuple = [
    ipId: AddressLike,
    royaltyPolicy: AddressLike,
    licensePercent: BigNumberish,
    externalData: BytesLike
  ];
  export type OutputTuple = [
    ipId: string,
    royaltyPolicy: string,
    licensePercent: bigint,
    externalData: string
  ];
  export interface OutputObject {
    ipId: string;
    royaltyPolicy: string;
    licensePercent: bigint;
    externalData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LinkedToParentsEvent {
  export type InputTuple = [
    ipId: AddressLike,
    parentIpIds: AddressLike[],
    licenseRoyaltyPolicies: AddressLike[],
    licensesPercent: BigNumberish[],
    externalData: BytesLike
  ];
  export type OutputTuple = [
    ipId: string,
    parentIpIds: string[],
    licenseRoyaltyPolicies: string[],
    licensesPercent: bigint[],
    externalData: string
  ];
  export interface OutputObject {
    ipId: string;
    parentIpIds: string[];
    licenseRoyaltyPolicies: string[];
    licensesPercent: bigint[];
    externalData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyFeePercentSetEvent {
  export type InputTuple = [royaltyFeePercent: BigNumberish];
  export type OutputTuple = [royaltyFeePercent: bigint];
  export interface OutputObject {
    royaltyFeePercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyLimitsUpdatedEvent {
  export type InputTuple = [accumulatedRoyaltyPoliciesLimit: BigNumberish];
  export type OutputTuple = [accumulatedRoyaltyPoliciesLimit: bigint];
  export interface OutputObject {
    accumulatedRoyaltyPoliciesLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyPaidEvent {
  export type InputTuple = [
    receiverIpId: AddressLike,
    payerIpId: AddressLike,
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    amountAfterFee: BigNumberish
  ];
  export type OutputTuple = [
    receiverIpId: string,
    payerIpId: string,
    sender: string,
    token: string,
    amount: bigint,
    amountAfterFee: bigint
  ];
  export interface OutputObject {
    receiverIpId: string;
    payerIpId: string;
    sender: string;
    token: string;
    amount: bigint;
    amountAfterFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyPolicyWhitelistUpdatedEvent {
  export type InputTuple = [royaltyPolicy: AddressLike, allowed: boolean];
  export type OutputTuple = [royaltyPolicy: string, allowed: boolean];
  export interface OutputObject {
    royaltyPolicy: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyTokenWhitelistUpdatedEvent {
  export type InputTuple = [token: AddressLike, allowed: boolean];
  export type OutputTuple = [token: string, allowed: boolean];
  export interface OutputObject {
    token: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasurySetEvent {
  export type InputTuple = [treasury: AddressLike];
  export type OutputTuple = [treasury: string];
  export interface OutputObject {
    treasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRoyaltyModule extends BaseContract {
  connect(runner?: ContractRunner | null): IRoyaltyModule;
  waitForDeployment(): Promise<this>;

  interface: IRoyaltyModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accumulatedRoyaltyPolicies: TypedContractMethod<
    [ipId: AddressLike],
    [string[]],
    "view"
  >;

  deployVault: TypedContractMethod<[ipId: AddressLike], [string], "nonpayable">;

  globalRoyaltyStack: TypedContractMethod<
    [ipId: AddressLike],
    [bigint],
    "view"
  >;

  hasAncestorIp: TypedContractMethod<
    [ipId: AddressLike, ancestorIpId: AddressLike],
    [boolean],
    "nonpayable"
  >;

  ipRoyaltyVaults: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  isIpRoyaltyVault: TypedContractMethod<
    [ipRoyaltyVault: AddressLike],
    [boolean],
    "view"
  >;

  isRegisteredExternalRoyaltyPolicy: TypedContractMethod<
    [externalRoyaltyPolicy: AddressLike],
    [boolean],
    "view"
  >;

  isWhitelistedRoyaltyPolicy: TypedContractMethod<
    [royaltyPolicy: AddressLike],
    [boolean],
    "view"
  >;

  isWhitelistedRoyaltyToken: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  maxAccumulatedRoyaltyPolicies: TypedContractMethod<[], [bigint], "view">;

  maxAncestors: TypedContractMethod<[], [bigint], "view">;

  maxParents: TypedContractMethod<[], [bigint], "view">;

  maxPercent: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "nonpayable">;

  onLicenseMinting: TypedContractMethod<
    [
      ipId: AddressLike,
      royaltyPolicy: AddressLike,
      licensePercent: BigNumberish,
      externalData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  onLinkToParents: TypedContractMethod<
    [
      ipId: AddressLike,
      parentIpIds: AddressLike[],
      licenseRoyaltyPolicies: AddressLike[],
      licensesPercent: BigNumberish[],
      externalData: BytesLike,
      maxRts: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  payLicenseMintingFee: TypedContractMethod<
    [
      receiverIpId: AddressLike,
      payerAddress: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  payRoyaltyOnBehalf: TypedContractMethod<
    [
      receiverIpId: AddressLike,
      payerIpId: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerExternalRoyaltyPolicy: TypedContractMethod<
    [externalRoyaltyPolicy: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyFeePercent: TypedContractMethod<[], [bigint], "view">;

  setRoyaltyFeePercent: TypedContractMethod<
    [royaltyFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoyaltyLimits: TypedContractMethod<
    [accumulatedRoyaltyPoliciesLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalRevenueTokensAccounted: TypedContractMethod<
    [ipId: AddressLike, token: AddressLike, royaltyPolicy: AddressLike],
    [bigint],
    "view"
  >;

  totalRevenueTokensReceived: TypedContractMethod<
    [ipId: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  whitelistRoyaltyPolicy: TypedContractMethod<
    [royaltyPolicy: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  whitelistRoyaltyToken: TypedContractMethod<
    [token: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accumulatedRoyaltyPolicies"
  ): TypedContractMethod<[ipId: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "deployVault"
  ): TypedContractMethod<[ipId: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "globalRoyaltyStack"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasAncestorIp"
  ): TypedContractMethod<
    [ipId: AddressLike, ancestorIpId: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ipRoyaltyVaults"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isIpRoyaltyVault"
  ): TypedContractMethod<[ipRoyaltyVault: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegisteredExternalRoyaltyPolicy"
  ): TypedContractMethod<
    [externalRoyaltyPolicy: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWhitelistedRoyaltyPolicy"
  ): TypedContractMethod<[royaltyPolicy: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelistedRoyaltyToken"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxAccumulatedRoyaltyPolicies"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxAncestors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxParents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "onLicenseMinting"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      royaltyPolicy: AddressLike,
      licensePercent: BigNumberish,
      externalData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onLinkToParents"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      parentIpIds: AddressLike[],
      licenseRoyaltyPolicies: AddressLike[],
      licensesPercent: BigNumberish[],
      externalData: BytesLike,
      maxRts: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payLicenseMintingFee"
  ): TypedContractMethod<
    [
      receiverIpId: AddressLike,
      payerAddress: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payRoyaltyOnBehalf"
  ): TypedContractMethod<
    [
      receiverIpId: AddressLike,
      payerIpId: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerExternalRoyaltyPolicy"
  ): TypedContractMethod<
    [externalRoyaltyPolicy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setRoyaltyFeePercent"
  ): TypedContractMethod<
    [royaltyFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoyaltyLimits"
  ): TypedContractMethod<
    [accumulatedRoyaltyPoliciesLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalRevenueTokensAccounted"
  ): TypedContractMethod<
    [ipId: AddressLike, token: AddressLike, royaltyPolicy: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalRevenueTokensReceived"
  ): TypedContractMethod<
    [ipId: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelistRoyaltyPolicy"
  ): TypedContractMethod<
    [royaltyPolicy: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistRoyaltyToken"
  ): TypedContractMethod<
    [token: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ExternalRoyaltyPolicyRegistered"
  ): TypedContractEvent<
    ExternalRoyaltyPolicyRegisteredEvent.InputTuple,
    ExternalRoyaltyPolicyRegisteredEvent.OutputTuple,
    ExternalRoyaltyPolicyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IpRoyaltyVaultDeployed"
  ): TypedContractEvent<
    IpRoyaltyVaultDeployedEvent.InputTuple,
    IpRoyaltyVaultDeployedEvent.OutputTuple,
    IpRoyaltyVaultDeployedEvent.OutputObject
  >;
  getEvent(
    key: "LicenseMintingFeePaid"
  ): TypedContractEvent<
    LicenseMintingFeePaidEvent.InputTuple,
    LicenseMintingFeePaidEvent.OutputTuple,
    LicenseMintingFeePaidEvent.OutputObject
  >;
  getEvent(
    key: "LicensedWithRoyalty"
  ): TypedContractEvent<
    LicensedWithRoyaltyEvent.InputTuple,
    LicensedWithRoyaltyEvent.OutputTuple,
    LicensedWithRoyaltyEvent.OutputObject
  >;
  getEvent(
    key: "LinkedToParents"
  ): TypedContractEvent<
    LinkedToParentsEvent.InputTuple,
    LinkedToParentsEvent.OutputTuple,
    LinkedToParentsEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyFeePercentSet"
  ): TypedContractEvent<
    RoyaltyFeePercentSetEvent.InputTuple,
    RoyaltyFeePercentSetEvent.OutputTuple,
    RoyaltyFeePercentSetEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyLimitsUpdated"
  ): TypedContractEvent<
    RoyaltyLimitsUpdatedEvent.InputTuple,
    RoyaltyLimitsUpdatedEvent.OutputTuple,
    RoyaltyLimitsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyPaid"
  ): TypedContractEvent<
    RoyaltyPaidEvent.InputTuple,
    RoyaltyPaidEvent.OutputTuple,
    RoyaltyPaidEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyPolicyWhitelistUpdated"
  ): TypedContractEvent<
    RoyaltyPolicyWhitelistUpdatedEvent.InputTuple,
    RoyaltyPolicyWhitelistUpdatedEvent.OutputTuple,
    RoyaltyPolicyWhitelistUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyTokenWhitelistUpdated"
  ): TypedContractEvent<
    RoyaltyTokenWhitelistUpdatedEvent.InputTuple,
    RoyaltyTokenWhitelistUpdatedEvent.OutputTuple,
    RoyaltyTokenWhitelistUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TreasurySet"
  ): TypedContractEvent<
    TreasurySetEvent.InputTuple,
    TreasurySetEvent.OutputTuple,
    TreasurySetEvent.OutputObject
  >;

  filters: {
    "ExternalRoyaltyPolicyRegistered(address)": TypedContractEvent<
      ExternalRoyaltyPolicyRegisteredEvent.InputTuple,
      ExternalRoyaltyPolicyRegisteredEvent.OutputTuple,
      ExternalRoyaltyPolicyRegisteredEvent.OutputObject
    >;
    ExternalRoyaltyPolicyRegistered: TypedContractEvent<
      ExternalRoyaltyPolicyRegisteredEvent.InputTuple,
      ExternalRoyaltyPolicyRegisteredEvent.OutputTuple,
      ExternalRoyaltyPolicyRegisteredEvent.OutputObject
    >;

    "IpRoyaltyVaultDeployed(address,address)": TypedContractEvent<
      IpRoyaltyVaultDeployedEvent.InputTuple,
      IpRoyaltyVaultDeployedEvent.OutputTuple,
      IpRoyaltyVaultDeployedEvent.OutputObject
    >;
    IpRoyaltyVaultDeployed: TypedContractEvent<
      IpRoyaltyVaultDeployedEvent.InputTuple,
      IpRoyaltyVaultDeployedEvent.OutputTuple,
      IpRoyaltyVaultDeployedEvent.OutputObject
    >;

    "LicenseMintingFeePaid(address,address,address,uint256,uint256)": TypedContractEvent<
      LicenseMintingFeePaidEvent.InputTuple,
      LicenseMintingFeePaidEvent.OutputTuple,
      LicenseMintingFeePaidEvent.OutputObject
    >;
    LicenseMintingFeePaid: TypedContractEvent<
      LicenseMintingFeePaidEvent.InputTuple,
      LicenseMintingFeePaidEvent.OutputTuple,
      LicenseMintingFeePaidEvent.OutputObject
    >;

    "LicensedWithRoyalty(address,address,uint32,bytes)": TypedContractEvent<
      LicensedWithRoyaltyEvent.InputTuple,
      LicensedWithRoyaltyEvent.OutputTuple,
      LicensedWithRoyaltyEvent.OutputObject
    >;
    LicensedWithRoyalty: TypedContractEvent<
      LicensedWithRoyaltyEvent.InputTuple,
      LicensedWithRoyaltyEvent.OutputTuple,
      LicensedWithRoyaltyEvent.OutputObject
    >;

    "LinkedToParents(address,address[],address[],uint32[],bytes)": TypedContractEvent<
      LinkedToParentsEvent.InputTuple,
      LinkedToParentsEvent.OutputTuple,
      LinkedToParentsEvent.OutputObject
    >;
    LinkedToParents: TypedContractEvent<
      LinkedToParentsEvent.InputTuple,
      LinkedToParentsEvent.OutputTuple,
      LinkedToParentsEvent.OutputObject
    >;

    "RoyaltyFeePercentSet(uint256)": TypedContractEvent<
      RoyaltyFeePercentSetEvent.InputTuple,
      RoyaltyFeePercentSetEvent.OutputTuple,
      RoyaltyFeePercentSetEvent.OutputObject
    >;
    RoyaltyFeePercentSet: TypedContractEvent<
      RoyaltyFeePercentSetEvent.InputTuple,
      RoyaltyFeePercentSetEvent.OutputTuple,
      RoyaltyFeePercentSetEvent.OutputObject
    >;

    "RoyaltyLimitsUpdated(uint256)": TypedContractEvent<
      RoyaltyLimitsUpdatedEvent.InputTuple,
      RoyaltyLimitsUpdatedEvent.OutputTuple,
      RoyaltyLimitsUpdatedEvent.OutputObject
    >;
    RoyaltyLimitsUpdated: TypedContractEvent<
      RoyaltyLimitsUpdatedEvent.InputTuple,
      RoyaltyLimitsUpdatedEvent.OutputTuple,
      RoyaltyLimitsUpdatedEvent.OutputObject
    >;

    "RoyaltyPaid(address,address,address,address,uint256,uint256)": TypedContractEvent<
      RoyaltyPaidEvent.InputTuple,
      RoyaltyPaidEvent.OutputTuple,
      RoyaltyPaidEvent.OutputObject
    >;
    RoyaltyPaid: TypedContractEvent<
      RoyaltyPaidEvent.InputTuple,
      RoyaltyPaidEvent.OutputTuple,
      RoyaltyPaidEvent.OutputObject
    >;

    "RoyaltyPolicyWhitelistUpdated(address,bool)": TypedContractEvent<
      RoyaltyPolicyWhitelistUpdatedEvent.InputTuple,
      RoyaltyPolicyWhitelistUpdatedEvent.OutputTuple,
      RoyaltyPolicyWhitelistUpdatedEvent.OutputObject
    >;
    RoyaltyPolicyWhitelistUpdated: TypedContractEvent<
      RoyaltyPolicyWhitelistUpdatedEvent.InputTuple,
      RoyaltyPolicyWhitelistUpdatedEvent.OutputTuple,
      RoyaltyPolicyWhitelistUpdatedEvent.OutputObject
    >;

    "RoyaltyTokenWhitelistUpdated(address,bool)": TypedContractEvent<
      RoyaltyTokenWhitelistUpdatedEvent.InputTuple,
      RoyaltyTokenWhitelistUpdatedEvent.OutputTuple,
      RoyaltyTokenWhitelistUpdatedEvent.OutputObject
    >;
    RoyaltyTokenWhitelistUpdated: TypedContractEvent<
      RoyaltyTokenWhitelistUpdatedEvent.InputTuple,
      RoyaltyTokenWhitelistUpdatedEvent.OutputTuple,
      RoyaltyTokenWhitelistUpdatedEvent.OutputObject
    >;

    "TreasurySet(address)": TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;
    TreasurySet: TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;
  };
}
