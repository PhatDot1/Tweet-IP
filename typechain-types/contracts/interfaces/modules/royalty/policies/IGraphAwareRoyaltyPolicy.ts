/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IGraphAwareRoyaltyPolicyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPolicyRoyalty"
      | "getPolicyRoyaltyStack"
      | "getPolicyRtsRequiredToLink"
      | "getTransferredTokens"
      | "isSupportGroup"
      | "onLicenseMinting"
      | "onLinkToParents"
      | "transferToVault"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RevenueTransferredToVault"): EventFragment;

  encodeFunctionData(
    functionFragment: "getPolicyRoyalty",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyRoyaltyStack",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyRtsRequiredToLink",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferredTokens",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onLicenseMinting",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onLinkToParents",
    values: [
      AddressLike,
      AddressLike[],
      AddressLike[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPolicyRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyRoyaltyStack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyRtsRequiredToLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLicenseMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLinkToParents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
}

export namespace RevenueTransferredToVaultEvent {
  export type InputTuple = [
    ipId: AddressLike,
    ancestorIpId: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    ipId: string,
    ancestorIpId: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    ipId: string;
    ancestorIpId: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGraphAwareRoyaltyPolicy extends BaseContract {
  connect(runner?: ContractRunner | null): IGraphAwareRoyaltyPolicy;
  waitForDeployment(): Promise<this>;

  interface: IGraphAwareRoyaltyPolicyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPolicyRoyalty: TypedContractMethod<
    [ipId: AddressLike, ancestorIpId: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getPolicyRoyaltyStack: TypedContractMethod<
    [ipId: AddressLike],
    [bigint],
    "view"
  >;

  getPolicyRtsRequiredToLink: TypedContractMethod<
    [ipId: AddressLike, licensePercent: BigNumberish],
    [bigint],
    "view"
  >;

  getTransferredTokens: TypedContractMethod<
    [ipId: AddressLike, ancestorIpId: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  isSupportGroup: TypedContractMethod<[], [boolean], "view">;

  onLicenseMinting: TypedContractMethod<
    [ipId: AddressLike, licensePercent: BigNumberish, externalData: BytesLike],
    [void],
    "nonpayable"
  >;

  onLinkToParents: TypedContractMethod<
    [
      ipId: AddressLike,
      parentIpIds: AddressLike[],
      licenseRoyaltyPolicies: AddressLike[],
      licensesPercent: BigNumberish[],
      externalData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  transferToVault: TypedContractMethod<
    [ipId: AddressLike, ancestorIpId: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPolicyRoyalty"
  ): TypedContractMethod<
    [ipId: AddressLike, ancestorIpId: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPolicyRoyaltyStack"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPolicyRtsRequiredToLink"
  ): TypedContractMethod<
    [ipId: AddressLike, licensePercent: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferredTokens"
  ): TypedContractMethod<
    [ipId: AddressLike, ancestorIpId: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSupportGroup"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "onLicenseMinting"
  ): TypedContractMethod<
    [ipId: AddressLike, licensePercent: BigNumberish, externalData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onLinkToParents"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      parentIpIds: AddressLike[],
      licenseRoyaltyPolicies: AddressLike[],
      licensesPercent: BigNumberish[],
      externalData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToVault"
  ): TypedContractMethod<
    [ipId: AddressLike, ancestorIpId: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "RevenueTransferredToVault"
  ): TypedContractEvent<
    RevenueTransferredToVaultEvent.InputTuple,
    RevenueTransferredToVaultEvent.OutputTuple,
    RevenueTransferredToVaultEvent.OutputObject
  >;

  filters: {
    "RevenueTransferredToVault(address,address,address,uint256)": TypedContractEvent<
      RevenueTransferredToVaultEvent.InputTuple,
      RevenueTransferredToVaultEvent.OutputTuple,
      RevenueTransferredToVaultEvent.OutputObject
    >;
    RevenueTransferredToVault: TypedContractEvent<
      RevenueTransferredToVaultEvent.InputTuple,
      RevenueTransferredToVaultEvent.OutputTuple,
      RevenueTransferredToVaultEvent.OutputObject
    >;
  };
}
