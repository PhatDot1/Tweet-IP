/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace ICoreMetadataViewModule {
  export type CoreMetadataStruct = {
    nftTokenURI: string;
    nftMetadataHash: BytesLike;
    metadataURI: string;
    metadataHash: BytesLike;
    registrationDate: BigNumberish;
    owner: AddressLike;
  };

  export type CoreMetadataStructOutput = [
    nftTokenURI: string,
    nftMetadataHash: string,
    metadataURI: string,
    metadataHash: string,
    registrationDate: bigint,
    owner: string
  ] & {
    nftTokenURI: string;
    nftMetadataHash: string;
    metadataURI: string;
    metadataHash: string;
    registrationDate: bigint;
    owner: string;
  };
}

export interface ICoreMetadataViewModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCoreMetadata"
      | "getJsonString"
      | "getMetadataHash"
      | "getMetadataURI"
      | "getNftMetadataHash"
      | "getNftTokenURI"
      | "getOwner"
      | "getRegistrationDate"
      | "isSupported"
      | "name"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCoreMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getJsonString",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataHash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataURI",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftMetadataHash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftTokenURI",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrationDate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCoreMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJsonString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftMetadataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface ICoreMetadataViewModule extends BaseContract {
  connect(runner?: ContractRunner | null): ICoreMetadataViewModule;
  waitForDeployment(): Promise<this>;

  interface: ICoreMetadataViewModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCoreMetadata: TypedContractMethod<
    [ipId: AddressLike],
    [ICoreMetadataViewModule.CoreMetadataStructOutput],
    "view"
  >;

  getJsonString: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  getMetadataHash: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  getMetadataURI: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  getNftMetadataHash: TypedContractMethod<
    [ipId: AddressLike],
    [string],
    "view"
  >;

  getNftTokenURI: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  getOwner: TypedContractMethod<[ipId: AddressLike], [string], "view">;

  getRegistrationDate: TypedContractMethod<
    [ipId: AddressLike],
    [bigint],
    "view"
  >;

  isSupported: TypedContractMethod<
    [ipAccount: AddressLike],
    [boolean],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCoreMetadata"
  ): TypedContractMethod<
    [ipId: AddressLike],
    [ICoreMetadataViewModule.CoreMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJsonString"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMetadataHash"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMetadataURI"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getNftMetadataHash"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getNftTokenURI"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[ipId: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRegistrationDate"
  ): TypedContractMethod<[ipId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isSupported"
  ): TypedContractMethod<[ipAccount: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
