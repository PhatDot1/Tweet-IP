/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ICoreMetadataModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "freezeMetadata"
      | "isMetadataFrozen"
      | "name"
      | "setAll"
      | "setMetadataURI"
      | "supportsInterface"
      | "updateNftTokenURI"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MetadataFrozen"
      | "MetadataURISet"
      | "NFTTokenURISet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "freezeMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMetadataFrozen",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAll",
    values: [AddressLike, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataURI",
    values: [AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNftTokenURI",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "freezeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMetadataFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNftTokenURI",
    data: BytesLike
  ): Result;
}

export namespace MetadataFrozenEvent {
  export type InputTuple = [ipId: AddressLike];
  export type OutputTuple = [ipId: string];
  export interface OutputObject {
    ipId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataURISetEvent {
  export type InputTuple = [
    ipId: AddressLike,
    metadataURI: string,
    metadataHash: BytesLike
  ];
  export type OutputTuple = [
    ipId: string,
    metadataURI: string,
    metadataHash: string
  ];
  export interface OutputObject {
    ipId: string;
    metadataURI: string;
    metadataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTTokenURISetEvent {
  export type InputTuple = [
    ipId: AddressLike,
    nftTokenURI: string,
    nftMetadataHash: BytesLike
  ];
  export type OutputTuple = [
    ipId: string,
    nftTokenURI: string,
    nftMetadataHash: string
  ];
  export interface OutputObject {
    ipId: string;
    nftTokenURI: string;
    nftMetadataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICoreMetadataModule extends BaseContract {
  connect(runner?: ContractRunner | null): ICoreMetadataModule;
  waitForDeployment(): Promise<this>;

  interface: ICoreMetadataModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  freezeMetadata: TypedContractMethod<
    [ipId: AddressLike],
    [void],
    "nonpayable"
  >;

  isMetadataFrozen: TypedContractMethod<[ipId: AddressLike], [boolean], "view">;

  name: TypedContractMethod<[], [string], "nonpayable">;

  setAll: TypedContractMethod<
    [
      ipId: AddressLike,
      metadataURI: string,
      metadataHash: BytesLike,
      nftMetadataHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setMetadataURI: TypedContractMethod<
    [ipId: AddressLike, metadataURI: string, metadataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateNftTokenURI: TypedContractMethod<
    [ipId: AddressLike, nftMetadataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "freezeMetadata"
  ): TypedContractMethod<[ipId: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isMetadataFrozen"
  ): TypedContractMethod<[ipId: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "setAll"
  ): TypedContractMethod<
    [
      ipId: AddressLike,
      metadataURI: string,
      metadataHash: BytesLike,
      nftMetadataHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMetadataURI"
  ): TypedContractMethod<
    [ipId: AddressLike, metadataURI: string, metadataHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateNftTokenURI"
  ): TypedContractMethod<
    [ipId: AddressLike, nftMetadataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MetadataFrozen"
  ): TypedContractEvent<
    MetadataFrozenEvent.InputTuple,
    MetadataFrozenEvent.OutputTuple,
    MetadataFrozenEvent.OutputObject
  >;
  getEvent(
    key: "MetadataURISet"
  ): TypedContractEvent<
    MetadataURISetEvent.InputTuple,
    MetadataURISetEvent.OutputTuple,
    MetadataURISetEvent.OutputObject
  >;
  getEvent(
    key: "NFTTokenURISet"
  ): TypedContractEvent<
    NFTTokenURISetEvent.InputTuple,
    NFTTokenURISetEvent.OutputTuple,
    NFTTokenURISetEvent.OutputObject
  >;

  filters: {
    "MetadataFrozen(address)": TypedContractEvent<
      MetadataFrozenEvent.InputTuple,
      MetadataFrozenEvent.OutputTuple,
      MetadataFrozenEvent.OutputObject
    >;
    MetadataFrozen: TypedContractEvent<
      MetadataFrozenEvent.InputTuple,
      MetadataFrozenEvent.OutputTuple,
      MetadataFrozenEvent.OutputObject
    >;

    "MetadataURISet(address,string,bytes32)": TypedContractEvent<
      MetadataURISetEvent.InputTuple,
      MetadataURISetEvent.OutputTuple,
      MetadataURISetEvent.OutputObject
    >;
    MetadataURISet: TypedContractEvent<
      MetadataURISetEvent.InputTuple,
      MetadataURISetEvent.OutputTuple,
      MetadataURISetEvent.OutputObject
    >;

    "NFTTokenURISet(address,string,bytes32)": TypedContractEvent<
      NFTTokenURISetEvent.InputTuple,
      NFTTokenURISetEvent.OutputTuple,
      NFTTokenURISetEvent.OutputObject
    >;
    NFTTokenURISet: TypedContractEvent<
      NFTTokenURISetEvent.InputTuple,
      NFTTokenURISetEvent.OutputTuple,
      NFTTokenURISetEvent.OutputObject
    >;
  };
}
