/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface IArbitrationPolicyUMAInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assertionDisputedCallback"
      | "assertionIdToDisputeId"
      | "assertionResolvedCallback"
      | "disputeAssertion"
      | "disputeIdToAssertionId"
      | "ipOwnerTimePercent"
      | "ipOwnerTimePercents"
      | "maxBonds"
      | "maxLiveness"
      | "minLiveness"
      | "onDisputeCancel"
      | "onDisputeJudgement"
      | "onRaiseDispute"
      | "onResolveDispute"
      | "oov3"
      | "setLiveness"
      | "setMaxBond"
      | "setOOV3"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssertionDisputed"
      | "DisputeRaisedUMA"
      | "LivenessSet"
      | "MaxBondSet"
      | "OOV3Set"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assertionDisputedCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionIdToDisputeId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertionResolvedCallback",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeAssertion",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeIdToAssertionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipOwnerTimePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ipOwnerTimePercents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBonds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onDisputeCancel",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onDisputeJudgement",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onRaiseDispute",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onResolveDispute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oov3", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLiveness",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBond",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOOV3",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "assertionDisputedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionIdToDisputeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionResolvedCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeIdToAssertionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipOwnerTimePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipOwnerTimePercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxBonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onDisputeCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onDisputeJudgement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRaiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onResolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oov3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOOV3", data: BytesLike): Result;
}

export namespace AssertionDisputedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    assertionId: BytesLike,
    counterEvidenceHash: BytesLike
  ];
  export type OutputTuple = [
    disputeId: bigint,
    assertionId: string,
    counterEvidenceHash: string
  ];
  export interface OutputObject {
    disputeId: bigint;
    assertionId: string;
    counterEvidenceHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedUMAEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    assertionId: BytesLike,
    disputeInitiator: AddressLike,
    liveness: BigNumberish,
    currency: AddressLike,
    bond: BigNumberish
  ];
  export type OutputTuple = [
    disputeId: bigint,
    assertionId: string,
    disputeInitiator: string,
    liveness: bigint,
    currency: string,
    bond: bigint
  ];
  export interface OutputObject {
    disputeId: bigint;
    assertionId: string;
    disputeInitiator: string;
    liveness: bigint;
    currency: string;
    bond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LivenessSetEvent {
  export type InputTuple = [
    minLiveness: BigNumberish,
    maxLiveness: BigNumberish,
    ipOwnerTimePercent: BigNumberish
  ];
  export type OutputTuple = [
    minLiveness: bigint,
    maxLiveness: bigint,
    ipOwnerTimePercent: bigint
  ];
  export interface OutputObject {
    minLiveness: bigint;
    maxLiveness: bigint;
    ipOwnerTimePercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxBondSetEvent {
  export type InputTuple = [token: AddressLike, maxBond: BigNumberish];
  export type OutputTuple = [token: string, maxBond: bigint];
  export interface OutputObject {
    token: string;
    maxBond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OOV3SetEvent {
  export type InputTuple = [oov3: AddressLike];
  export type OutputTuple = [oov3: string];
  export interface OutputObject {
    oov3: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IArbitrationPolicyUMA extends BaseContract {
  connect(runner?: ContractRunner | null): IArbitrationPolicyUMA;
  waitForDeployment(): Promise<this>;

  interface: IArbitrationPolicyUMAInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assertionDisputedCallback: TypedContractMethod<
    [assertionId: BytesLike],
    [void],
    "nonpayable"
  >;

  assertionIdToDisputeId: TypedContractMethod<
    [assertionId: BytesLike],
    [bigint],
    "view"
  >;

  assertionResolvedCallback: TypedContractMethod<
    [assertionId: BytesLike, assertedTruthfully: boolean],
    [void],
    "nonpayable"
  >;

  disputeAssertion: TypedContractMethod<
    [assertionId: BytesLike, counterEvidenceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  disputeIdToAssertionId: TypedContractMethod<
    [disputeId: BigNumberish],
    [string],
    "view"
  >;

  ipOwnerTimePercent: TypedContractMethod<[], [bigint], "view">;

  ipOwnerTimePercents: TypedContractMethod<
    [disputeId: BigNumberish],
    [bigint],
    "view"
  >;

  maxBonds: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  maxLiveness: TypedContractMethod<[], [bigint], "view">;

  minLiveness: TypedContractMethod<[], [bigint], "view">;

  onDisputeCancel: TypedContractMethod<
    [caller: AddressLike, disputeId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  onDisputeJudgement: TypedContractMethod<
    [disputeId: BigNumberish, decision: boolean, data: BytesLike],
    [void],
    "nonpayable"
  >;

  onRaiseDispute: TypedContractMethod<
    [
      caller: AddressLike,
      disputeInitiator: AddressLike,
      targetIpId: AddressLike,
      disputeEvidenceHash: BytesLike,
      targetTag: BytesLike,
      disputeId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  onResolveDispute: TypedContractMethod<
    [caller: AddressLike, disputeId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  oov3: TypedContractMethod<[], [string], "view">;

  setLiveness: TypedContractMethod<
    [
      minLiveness: BigNumberish,
      maxLiveness: BigNumberish,
      ipOwnerTimePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setMaxBond: TypedContractMethod<
    [token: AddressLike, maxBond: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOOV3: TypedContractMethod<[oov3: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assertionDisputedCallback"
  ): TypedContractMethod<[assertionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assertionIdToDisputeId"
  ): TypedContractMethod<[assertionId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "assertionResolvedCallback"
  ): TypedContractMethod<
    [assertionId: BytesLike, assertedTruthfully: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disputeAssertion"
  ): TypedContractMethod<
    [assertionId: BytesLike, counterEvidenceHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disputeIdToAssertionId"
  ): TypedContractMethod<[disputeId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ipOwnerTimePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ipOwnerTimePercents"
  ): TypedContractMethod<[disputeId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxBonds"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxLiveness"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minLiveness"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onDisputeCancel"
  ): TypedContractMethod<
    [caller: AddressLike, disputeId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onDisputeJudgement"
  ): TypedContractMethod<
    [disputeId: BigNumberish, decision: boolean, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onRaiseDispute"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      disputeInitiator: AddressLike,
      targetIpId: AddressLike,
      disputeEvidenceHash: BytesLike,
      targetTag: BytesLike,
      disputeId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onResolveDispute"
  ): TypedContractMethod<
    [caller: AddressLike, disputeId: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oov3"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setLiveness"
  ): TypedContractMethod<
    [
      minLiveness: BigNumberish,
      maxLiveness: BigNumberish,
      ipOwnerTimePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxBond"
  ): TypedContractMethod<
    [token: AddressLike, maxBond: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOOV3"
  ): TypedContractMethod<[oov3: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AssertionDisputed"
  ): TypedContractEvent<
    AssertionDisputedEvent.InputTuple,
    AssertionDisputedEvent.OutputTuple,
    AssertionDisputedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaisedUMA"
  ): TypedContractEvent<
    DisputeRaisedUMAEvent.InputTuple,
    DisputeRaisedUMAEvent.OutputTuple,
    DisputeRaisedUMAEvent.OutputObject
  >;
  getEvent(
    key: "LivenessSet"
  ): TypedContractEvent<
    LivenessSetEvent.InputTuple,
    LivenessSetEvent.OutputTuple,
    LivenessSetEvent.OutputObject
  >;
  getEvent(
    key: "MaxBondSet"
  ): TypedContractEvent<
    MaxBondSetEvent.InputTuple,
    MaxBondSetEvent.OutputTuple,
    MaxBondSetEvent.OutputObject
  >;
  getEvent(
    key: "OOV3Set"
  ): TypedContractEvent<
    OOV3SetEvent.InputTuple,
    OOV3SetEvent.OutputTuple,
    OOV3SetEvent.OutputObject
  >;

  filters: {
    "AssertionDisputed(uint256,bytes32,bytes32)": TypedContractEvent<
      AssertionDisputedEvent.InputTuple,
      AssertionDisputedEvent.OutputTuple,
      AssertionDisputedEvent.OutputObject
    >;
    AssertionDisputed: TypedContractEvent<
      AssertionDisputedEvent.InputTuple,
      AssertionDisputedEvent.OutputTuple,
      AssertionDisputedEvent.OutputObject
    >;

    "DisputeRaisedUMA(uint256,bytes32,address,uint64,address,uint256)": TypedContractEvent<
      DisputeRaisedUMAEvent.InputTuple,
      DisputeRaisedUMAEvent.OutputTuple,
      DisputeRaisedUMAEvent.OutputObject
    >;
    DisputeRaisedUMA: TypedContractEvent<
      DisputeRaisedUMAEvent.InputTuple,
      DisputeRaisedUMAEvent.OutputTuple,
      DisputeRaisedUMAEvent.OutputObject
    >;

    "LivenessSet(uint64,uint64,uint32)": TypedContractEvent<
      LivenessSetEvent.InputTuple,
      LivenessSetEvent.OutputTuple,
      LivenessSetEvent.OutputObject
    >;
    LivenessSet: TypedContractEvent<
      LivenessSetEvent.InputTuple,
      LivenessSetEvent.OutputTuple,
      LivenessSetEvent.OutputObject
    >;

    "MaxBondSet(address,uint256)": TypedContractEvent<
      MaxBondSetEvent.InputTuple,
      MaxBondSetEvent.OutputTuple,
      MaxBondSetEvent.OutputObject
    >;
    MaxBondSet: TypedContractEvent<
      MaxBondSetEvent.InputTuple,
      MaxBondSetEvent.OutputTuple,
      MaxBondSetEvent.OutputObject
    >;

    "OOV3Set(address)": TypedContractEvent<
      OOV3SetEvent.InputTuple,
      OOV3SetEvent.OutputTuple,
      OOV3SetEvent.OutputObject
    >;
    OOV3Set: TypedContractEvent<
      OOV3SetEvent.InputTuple,
      OOV3SetEvent.OutputTuple,
      OOV3SetEvent.OutputObject
    >;
  };
}
